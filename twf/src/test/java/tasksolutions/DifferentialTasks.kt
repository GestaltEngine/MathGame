package tasksolutions

import com.twf.factstransformations.FactConstructorViewer
import com.twf.factstransformations.parseFromFactIdentifier
import com.twf.logs.log
import com.twf.mainpoints.checkFactsInMathML
import com.twf.mainpoints.configSeparator
import org.junit.Assert
import org.junit.Ignore
import org.junit.Test

class DifferentialTasks {
    val wellKnownFunctions = "" +
            "${configSeparator}0$configSeparator" +
            "${configSeparator}1$configSeparator" +
            "+$configSeparator-1$configSeparator" +
            "-$configSeparator-1$configSeparator" +
            "*$configSeparator-1$configSeparator" +
            "/$configSeparator-1$configSeparator" +
            "^$configSeparator-1"

    @Test
    fun factorizationCorrect() {
        val result = checkFactsInMathML(
                brushedMathML = "<math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mo>(</mo><mfrac><mrow><mn>4</mn><mo>*</mo><mi>x</mi><mo>-</mo><mn>7</mn></mrow><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>4</mn></mrow></mfrac><mo>)</mo><mo>'</mo><mo>=</mo><mfrac><mrow><mn>4</mn><mo>(</mo><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>4</mn><mo>)</mo><mo>-</mo><mo>(</mo><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>4</mn><mo>)</mo><mo>'</mo><mo>*</mo><mo>(</mo><mn>4</mn><mo>*</mo><mi>x</mi><mo>-</mo><mn>7</mn><mo>)</mo></mrow><msup><mrow><mo>(</mo><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>4</mn><mo>)</mo></mrow><mn>2</mn></msup></mfrac><mo>=</mo><mfrac><mrow><mn>4</mn><mo>(</mo><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>4</mn><mo>)</mo><mo>-</mo><mn>2</mn><mo>*</mo><mi>x</mi><mo>*</mo><mo>(</mo><mn>4</mn><mo>*</mo><mi>x</mi><mo>-</mo><mn>7</mn><mo>)</mo></mrow><msup><mrow><mo>(</mo><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>4</mn><mo>)</mo></mrow><mn>2</mn></msup></mfrac></math>",
                wellKnownFunctions = wellKnownFunctions,
                expressionTransformationRules = " ",
                targetFactIdentifier = "(d(/(+(*(4;x);-(7));+(^(x;2);4))))",
                targetVariablesNames = "",
                minNumberOfMultipliersInAnswer = "",
                maxNumberOfDivisionsInAnswer = "",
                additionalFactsIdentifiers = "",
                maxExpressionTransformationWeight = "1.0",
                unlimitedWellKnownFunctions = wellKnownFunctions, //functions, which null-weight transformations allowed with any other transformations, split by configSeparator
                shortErrorDescription = "0", //crop parsed steps from error description
                taskContextExpressionTransformationRules = "", //for expression transformation rules based on variables
                allowedVariablesNames = "", //Variables expressions for which learner need to deduce, split by configSeparator
                maxDistBetweenDiffSteps = "", //is it allowed to differentiate expression in one step
                forbiddenFunctions = "d" //functions cannot been used in answer
        )

        "<math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mo>(</mo><mfrac><mrow><mn>4</mn><mo>*</mo><mi>x</mi><mo>-</mo><mn>7</mn></mrow><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>4</mn></mrow></mfrac><mo>)</mo><mo>'</mo><mo>=</mo><mo>.</mo><mo>.</mo><mo>.</mo></math>"

        val logRef = log.getLogInPlainText()

        assert(!result.contains("Error"))
        assert(!result.contains("#FF"))
        Assert.assertEquals("<math xmlns=\"http://www.w3.org/1998/Math/MathML\" mathcolor=\"#7F00FF\"><mo>(</mo><mfrac><mrow><mn>4</mn><mo>*</mo><mi>x</mi><mo>-</mo><mn>7</mn></mrow><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>4</mn></mrow></mfrac><mo>)</mo><mo>'</mo><mrow mathvariant=\"bold\" mathcolor=\"#007F00\"><mo>=</mo></mrow><mfrac><mrow><mn>4</mn><mo>(</mo><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>4</mn><mo>)</mo><mo>-</mo><mo>(</mo><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>4</mn><mo>)</mo><mo>'</mo><mo>*</mo><mo>(</mo><mn>4</mn><mo>*</mo><mi>x</mi><mo>-</mo><mn>7</mn><mo>)</mo></mrow><msup><mrow><mo>(</mo><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>4</mn><mo>)</mo></mrow><mn>2</mn></msup></mfrac><mrow mathvariant=\"bold\" mathcolor=\"#007F00\"><mo>=</mo></mrow><mfrac><mrow><mn>4</mn><mo>(</mo><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>4</mn><mo>)</mo><mo>-</mo><mn>2</mn><mo>*</mo><mi>x</mi><mo>*</mo><mo>(</mo><mn>4</mn><mo>*</mo><mi>x</mi><mo>-</mo><mn>7</mn><mo>)</mo></mrow><msup><mrow><mo>(</mo><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>4</mn><mo>)</mo></mrow><mn>2</mn></msup></mfrac></math>", result)
    }

    @Test
    fun factorizationWrong() {
        val result = checkFactsInMathML(
                brushedMathML = "<math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mo>(</mo><mfrac><mrow><mn>4</mn><mo>*</mo><mi>x</mi><mo>-</mo><mn>7</mn></mrow><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>4</mn></mrow></mfrac><mo>)</mo><mo>'</mo><mo>=</mo><mfrac><mrow><mi>x</mi><mo>(</mo><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>4</mn><mo>)</mo><mo>-</mo><mo>(</mo><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>4</mn><mo>)</mo><mo>'</mo><mo>*</mo><mo>(</mo><mn>4</mn><mo>*</mo><mi>x</mi><mo>-</mo><mn>7</mn><mo>)</mo></mrow><msup><mrow><mo>(</mo><mi>x</mi><sup><mn>2</mn></sup><mo>+</mo><mn>4</mn><mo>)</mo></mrow><mn>2</mn></msup></mfrac><mo>=</mo><mfrac><mrow><mi>x</mi><mo>(</mo><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>4</mn><mo>)</mo><mo>-</mo><mn>2</mn><mo>*</mo><mi>x</mi><mo>*</mo><mo>(</mo><mn>4</mn><mo>*</mo><mi>x</mi><mo>-</mo><mn>7</mn><mo>)</mo></mrow><msup><mrow><mo>(</mo><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>4</mn><mo>)</mo></mrow><mn>2</mn></msup></mfrac></math>",
                wellKnownFunctions = wellKnownFunctions,
                expressionTransformationRules = " ",
                targetFactIdentifier = "(d(/(+(*(4;x);-(7));+(^(x;2);4))))",
                targetVariablesNames = "",
                minNumberOfMultipliersInAnswer = "",
                maxNumberOfDivisionsInAnswer = "",
                additionalFactsIdentifiers = "",
                maxExpressionTransformationWeight = "1.0",
                unlimitedWellKnownFunctions = wellKnownFunctions, //functions, which null-weight transformations allowed with any other transformations, split by configSeparator
                shortErrorDescription = "0", //crop parsed steps from error description
                taskContextExpressionTransformationRules = "", //for expression transformation rules based on variables
                allowedVariablesNames = "", //Variables expressions for which learner need to deduce, split by configSeparator
                maxDistBetweenDiffSteps = "", //is it allowed to differentiate expression in one step
                forbiddenFunctions = "d" //functions cannot been used in answer
        )

        val logRef = log.getLogInPlainText()

        assert(result.contains("Error"))
        assert(result.contains("#FF"))
        Assert.assertEquals("<math xmlns=\"http://www.w3.org/1998/Math/MathML\" mathcolor=\"#7F00FF\"><mo>(</mo><mfrac><mrow><mn>4</mn><mo>*</mo><mi>x</mi><mo>-</mo><mn>7</mn></mrow><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>4</mn></mrow></mfrac><mo>)</mo><mo>'</mo><mrow mathvariant=\"bold\" mathcolor=\"#FF0000\"><mo>=</mo></mrow><mfrac><mrow><mi>x</mi><mo>(</mo><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>4</mn><mo>)</mo><mo>-</mo><mo>(</mo><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>4</mn><mo>)</mo><mo>'</mo><mo>*</mo><mo>(</mo><mn>4</mn><mo>*</mo><mi>x</mi><mo>-</mo><mn>7</mn><mo>)</mo></mrow><msup><mrow><mo>(</mo><mi>x</mi><sup><mn>2</mn></sup><mo>+</mo><mn>4</mn><mo>)</mo></mrow><mn>2</mn></msup></mfrac><mo>=</mo><mfrac><mrow><mi>x</mi><mo>(</mo><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>4</mn><mo>)</mo><mo>-</mo><mn>2</mn><mo>*</mo><mi>x</mi><mo>*</mo><mo>(</mo><mn>4</mn><mo>*</mo><mi>x</mi><mo>-</mo><mn>7</mn><mo>)</mo></mrow><msup><mrow><mo>(</mo><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>4</mn><mo>)</mo></mrow><mn>2</mn></msup></mfrac><mspace linebreak=\"newline\"/><mtext mathvariant=\"bold\" mathcolor=\"#FF0000\">Error: Unclear transformation between '(d(/(+(*(4;x);-(7));+(^(x;2);4))))' and '(/(+(*(x;+(^(x;2);4));-(*(d(+(^(x;2);4));+(*(4;x);-(7)))));^(+(^(x;2);4);2)))' </mtext></math>",
                result)
    }

    @Test
    fun factorizationWrongCheat() {
        val result = checkFactsInMathML(
                brushedMathML = "<math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mo>(</mo><mfrac><mrow><mn>4</mn><mo>*</mo><mi>x</mi><mo>-</mo><mn>7</mn></mrow><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>4</mn></mrow></mfrac><mo>)</mo><mo>'</mo><mo>=</mo><mfrac><mrow><mn>4</mn><mo>(</mo><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>4</mn><mo>)</mo><mo>-</mo><mn>2</mn><mo>*</mo><mi>x</mi><mo>*</mo><mo>(</mo><mn>4</mn><mo>*</mo><mi>x</mi><mo>-</mo><mn>7</mn><mo>)</mo></mrow><msup><mrow><mo>(</mo><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>4</mn><mo>)</mo></mrow><mn>2</mn></msup></mfrac></math>",
                wellKnownFunctions = wellKnownFunctions,
                expressionTransformationRules = " ",
                targetFactIdentifier = "(d(/(+(*(4;x);-(7));+(^(x;2);4))))",
                targetVariablesNames = "",
                minNumberOfMultipliersInAnswer = "",
                maxNumberOfDivisionsInAnswer = "",
                additionalFactsIdentifiers = "",
                maxExpressionTransformationWeight = "1.0",
                unlimitedWellKnownFunctions = wellKnownFunctions, //functions, which null-weight transformations allowed with any other transformations, split by configSeparator
                shortErrorDescription = "0", //crop parsed steps from error description
                taskContextExpressionTransformationRules = "", //for expression transformation rules based on variables
                allowedVariablesNames = "", //Variables expressions for which learner need to deduce, split by configSeparator
                maxDistBetweenDiffSteps = "", //is it allowed to differentiate expression in one step
                forbiddenFunctions = "d" //functions cannot been used in answer
        )

        val logRef = log.getLogInPlainText()

        assert(result.contains("Error"))
        assert(result.contains("#FF"))
        Assert.assertEquals("<math xmlns=\"http://www.w3.org/1998/Math/MathML\" mathcolor=\"#7F00FF\"><mo>(</mo><mfrac><mrow><mn>4</mn><mo>*</mo><mi>x</mi><mo>-</mo><mn>7</mn></mrow><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>4</mn></mrow></mfrac><mo>)</mo><mo>'</mo><mrow mathvariant=\"bold\" mathcolor=\"#FF0000\"><mo>=</mo></mrow><mfrac><mrow><mn>4</mn><mo>(</mo><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>4</mn><mo>)</mo><mo>-</mo><mn>2</mn><mo>*</mo><mi>x</mi><mo>*</mo><mo>(</mo><mn>4</mn><mo>*</mo><mi>x</mi><mo>-</mo><mn>7</mn><mo>)</mo></mrow><msup><mrow><mo>(</mo><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>4</mn><mo>)</mo></mrow><mn>2</mn></msup></mfrac><mspace linebreak=\"newline\"/><mtext mathvariant=\"bold\" mathcolor=\"#FF0000\">Error: Unclear transformation between '(d(/(+(*(4;x);-(7));+(^(x;2);4))))' and '(/(+(*(4;+(^(x;2);4));-(*(2;x;+(*(4;x);-(7)))));^(+(^(x;2);4);2)))' </mtext></math>",
                result)
    }

    @Test
    fun cosWrongCheat() {
        val result = checkFactsInMathML(
                brushedMathML = "<math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mfenced><mfrac><mrow><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow><mrow><mn>1</mn><mo>-</mo><mi>x</mi></mrow></mfrac></mfenced><mo>'</mo><mo>=</mo><mfrac><mrow><mo>-</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>(</mo><mn>1</mn><mo>-</mo><mi>x</mi><mo>)</mo><mo>+</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow><msup><mrow><mo>(</mo><mn>1</mn><mo>-</mo><mi>x</mi><mo>)</mo></mrow><mn>2</mn></msup></mfrac></math>",
                wellKnownFunctions = wellKnownFunctions,
                expressionTransformationRules = " ",
                targetFactIdentifier = "(d(/(cos(x);+(x;-(1)))))",
                targetVariablesNames = "",
                minNumberOfMultipliersInAnswer = "",
                maxNumberOfDivisionsInAnswer = "",
                additionalFactsIdentifiers = "",
                maxExpressionTransformationWeight = "1.0",
                unlimitedWellKnownFunctions = wellKnownFunctions, //functions, which null-weight transformations allowed with any other transformations, split by configSeparator
                shortErrorDescription = "0", //crop parsed steps from error description
                taskContextExpressionTransformationRules = "", //for expression transformation rules based on variables
                allowedVariablesNames = "", //Variables expressions for which learner need to deduce, split by configSeparator
                maxDistBetweenDiffSteps = "", //is it allowed to differentiate expression in one step
                forbiddenFunctions = "d" //functions cannot been used in answer
        )

        val logRef = log.getLogInPlainText()

        assert(result.contains("Error"))
        assert(result.contains("#FF"))
        Assert.assertEquals("<math xmlns=\"http://www.w3.org/1998/Math/MathML\" mathcolor=\"#7F00FF\"><mfenced><mfrac><mrow><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow><mrow><mn>1</mn><mo>-</mo><mi>x</mi></mrow></mfrac></mfenced><mo>'</mo><mrow mathvariant=\"bold\" mathcolor=\"#FF0000\"><mo>=</mo></mrow><mfrac><mrow><mo>-</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>(</mo><mn>1</mn><mo>-</mo><mi>x</mi><mo>)</mo><mo>+</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow><msup><mrow><mo>(</mo><mn>1</mn><mo>-</mo><mi>x</mi><mo>)</mo></mrow><mn>2</mn></msup></mfrac><mspace linebreak=\"newline\"/><mtext mathvariant=\"bold\" mathcolor=\"#FF0000\">Error: Unclear transformation between '(d(/(cos(x);+(1;-(x)))))' and '(/(+(-(*(sin(x);+(1;-(x))));cos(x));^(+(1;-(x));2)))' </mtext></math>",
                result)
    }

    @Test
    fun cosCorrect() {
        val result = checkFactsInMathML(
                brushedMathML = "<math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mfenced><mfrac><mrow><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow><mrow><mn>1</mn><mo>-</mo><mi>x</mi></mrow></mfrac></mfenced><mo>'</mo><mo>=</mo><mfrac><mrow><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>'</mo><mo>*</mo><mo>(</mo><mn>1</mn><mo>-</mo><mi>x</mi><mo>)</mo><mo>+</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow><msup><mrow><mo>(</mo><mn>1</mn><mo>-</mo><mi>x</mi><mo>)</mo></mrow><mn>2</mn></msup></mfrac><mo>=</mo><mfrac><mrow><mo>-</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>(</mo><mn>1</mn><mo>-</mo><mi>x</mi><mo>)</mo><mo>+</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow><msup><mrow><mo>(</mo><mn>1</mn><mo>-</mo><mi>x</mi><mo>)</mo></mrow><mn>2</mn></msup></mfrac></math>",
                wellKnownFunctions = wellKnownFunctions,
                expressionTransformationRules = " ",
                targetFactIdentifier = "(d(/(cos(x);+(1;-(x)))))",
                targetVariablesNames = "",
                minNumberOfMultipliersInAnswer = "",
                maxNumberOfDivisionsInAnswer = "",
                additionalFactsIdentifiers = "",
                maxExpressionTransformationWeight = "1.0",
                unlimitedWellKnownFunctions = wellKnownFunctions, //functions, which null-weight transformations allowed with any other transformations, split by configSeparator
                shortErrorDescription = "0", //crop parsed steps from error description
                taskContextExpressionTransformationRules = "", //for expression transformation rules based on variables
                allowedVariablesNames = "", //Variables expressions for which learner need to deduce, split by configSeparator
                maxDistBetweenDiffSteps = "", //is it allowed to differentiate expression in one step
                forbiddenFunctions = "d" //functions cannot been used in answer
        )

        val logRef = log.getLogInPlainText()

        assert(!result.contains("Error"))
        assert(!result.contains("#FF"))
        Assert.assertEquals("<math xmlns=\"http://www.w3.org/1998/Math/MathML\" mathcolor=\"#7F00FF\"><mfenced><mfrac><mrow><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow><mrow><mn>1</mn><mo>-</mo><mi>x</mi></mrow></mfrac></mfenced><mo>'</mo><mrow mathvariant=\"bold\" mathcolor=\"#007F00\"><mo>=</mo></mrow><mfrac><mrow><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>'</mo><mo>*</mo><mo>(</mo><mn>1</mn><mo>-</mo><mi>x</mi><mo>)</mo><mo>+</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow><msup><mrow><mo>(</mo><mn>1</mn><mo>-</mo><mi>x</mi><mo>)</mo></mrow><mn>2</mn></msup></mfrac><mrow mathvariant=\"bold\" mathcolor=\"#007F00\"><mo>=</mo></mrow><mfrac><mrow><mo>-</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>(</mo><mn>1</mn><mo>-</mo><mi>x</mi><mo>)</mo><mo>+</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow><msup><mrow><mo>(</mo><mn>1</mn><mo>-</mo><mi>x</mi><mo>)</mo></mrow><mn>2</mn></msup></mfrac></math>",
                result)
    }

    @Test
    fun cosNotFullSolution() {
        val result = checkFactsInMathML(
                brushedMathML = "<math mathcolor=\"#7F00FF\" xmlns=\"http://www.w3.org/1998/Math/MathML\"><mfenced><mfrac><mrow><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow><mrow><mn>1</mn><mo>-</mo><mi>x</mi></mrow></mfrac></mfenced><mo>'</mo><mo mathvariant=\"bold\" mathcolor=\"#007F00\">=</mo><mfrac><mrow><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>'</mo><mo>*</mo><mo>(</mo><mn>1</mn><mo>-</mo><mi>x</mi><mo>)</mo><mo>+</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow><msup><mrow><mo>(</mo><mn>1</mn><mo>-</mo><mi>x</mi><mo>)</mo></mrow><mn>2</mn></msup></mfrac></math>",
                wellKnownFunctions = wellKnownFunctions,
                expressionTransformationRules = " ",
                targetFactIdentifier = "(d(/(cos(x);+(1;-(x)))))",
                targetVariablesNames = "",
                minNumberOfMultipliersInAnswer = "",
                maxNumberOfDivisionsInAnswer = "",
                additionalFactsIdentifiers = "",
                maxExpressionTransformationWeight = "1.0",
                unlimitedWellKnownFunctions = wellKnownFunctions, //functions, which null-weight transformations allowed with any other transformations, split by configSeparator
                shortErrorDescription = "0", //crop parsed steps from error description
                taskContextExpressionTransformationRules = "", //for expression transformation rules based on variables
                allowedVariablesNames = "", //Variables expressions for which learner need to deduce, split by configSeparator
                maxDistBetweenDiffSteps = "", //is it allowed to differentiate expression in one step
                forbiddenFunctions = "d;;;1;;;d;;;2" //functions cannot been used in answer
        )

        val logRef = log.getLogInPlainText()

        assert(result.contains("Error"))
        assert(result.contains("#FF"))
        Assert.assertEquals("<math xmlns=\"http://www.w3.org/1998/Math/MathML\" mathcolor=\"#7F00FF\"><mfenced><mfrac><mrow><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow><mrow><mn>1</mn><mo>-</mo><mi>x</mi></mrow></mfrac></mfenced><mo>'</mo><mrow mathvariant=\"bold\" mathcolor=\"#007F00\"><mo>=</mo></mrow><mfrac><mrow><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>'</mo><mo>*</mo><mo>(</mo><mn>1</mn><mo>-</mo><mi>x</mi><mo>)</mo><mo>+</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow><msup><mrow><mo>(</mo><mn>1</mn><mo>-</mo><mi>x</mi><mo>)</mo></mrow><mn>2</mn></msup></mfrac><mspace linebreak=\"newline\"/><mtext mathvariant=\"bold\" mathcolor=\"#FF0000\">Error: Answer contains forbidden function or operation</mtext></math>",
                result)
    }

    @Test
    fun cosInSinCorrect() {
        val result = checkFactsInMathML(
                brushedMathML = "<math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mo>(</mo><msup><mrow><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow></msup><mo>)</mo><mo>'</mo><mo>=</mo><mo>(</mo><msup><mi>e</mi><mrow><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>)</mo><mo>'</mo><mo>=</mo><msup><mi>e</mi><mrow><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>*</mo><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>)</mo><mo>'</mo><mo>=</mo><msup><mi>e</mi><mrow><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>*</mo><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>+</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mfrac><mrow><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>'</mo></mrow><mrow><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow></mfrac><mo>)</mo><mo>=</mo><msup><mi>e</mi><mrow><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>*</mo><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>-</mo><mfrac><mrow><msup><mrow><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mn>2</mn></msup></mrow><mrow><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow></mfrac><mo>)</mo></math>",
                wellKnownFunctions = "",
                expressionTransformationRules = " ",
                targetFactIdentifier = "(d(^(cos(x);sin(x))))",
                targetVariablesNames = "",
                minNumberOfMultipliersInAnswer = "",
                maxNumberOfDivisionsInAnswer = "",
                additionalFactsIdentifiers = "",
                maxExpressionTransformationWeight = "1.0",
                unlimitedWellKnownFunctions = "", //functions, which null-weight transformations allowed with any other transformations, split by configSeparator
                shortErrorDescription = "0", //crop parsed steps from error description
                taskContextExpressionTransformationRules = "", //for expression transformation rules based on variables
                allowedVariablesNames = "", //Variables expressions for which learner need to deduce, split by configSeparator
                maxDistBetweenDiffSteps = "", //is it allowed to differentiate expression in one step
                forbiddenFunctions = "d" //functions cannot been used in answer
        )

        val logRef = log.getLogInPlainText()

        assert(!result.contains("Error"))
        assert(!result.contains("#FF"))
        Assert.assertEquals("<math xmlns=\"http://www.w3.org/1998/Math/MathML\" mathcolor=\"#7F00FF\"><mo>(</mo><msup><mrow><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow></msup><mo>)</mo><mo>'</mo><mrow mathvariant=\"bold\" mathcolor=\"#007F00\"><mo>=</mo></mrow><mo>(</mo><msup><mi>e</mi><mrow><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>)</mo><mo>'</mo><mrow mathvariant=\"bold\" mathcolor=\"#007F00\"><mo>=</mo></mrow><msup><mi>e</mi><mrow><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>*</mo><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>)</mo><mo>'</mo><mrow mathvariant=\"bold\" mathcolor=\"#007F00\"><mo>=</mo></mrow><msup><mi>e</mi><mrow><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>*</mo><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>+</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mfrac><mrow><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>'</mo></mrow><mrow><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow></mfrac><mo>)</mo><mrow mathvariant=\"bold\" mathcolor=\"#007F00\"><mo>=</mo></mrow><msup><mi>e</mi><mrow><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>*</mo><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>-</mo><mfrac><mrow><msup><mrow><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mn>2</mn></msup></mrow><mrow><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow></mfrac><mo>)</mo></math>",
                result)
    }

    @Test
    fun cosInSinCorrectOriginalMsup() {
        val result = checkFactsInMathML(
                brushedMathML = "<math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mo>(</mo><mo>(</mo><mi>cos</mi><msup><mrow><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow></msup><mo>)</mo><mo>'</mo><mo>=</mo><mo>(</mo><msup><mi>e</mi><mrow><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>)</mo><mo>'</mo><mo>=</mo><msup><mi>e</mi><mrow><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>*</mo><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>)</mo><mo>'</mo><mo>=</mo><msup><mi>e</mi><mrow><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>*</mo><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>+</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mfrac><mrow><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>'</mo></mrow><mrow><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow></mfrac><mo>)</mo><mo>=</mo><msup><mi>e</mi><mrow><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>*</mo><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>-</mo><mfrac><mrow><msup><mrow><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mn>2</mn></msup></mrow><mrow><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow></mfrac><mo>)</mo></math>",
                wellKnownFunctions = "",
                expressionTransformationRules = " ",
                targetFactIdentifier = "(d(^(cos(x);sin(x))))",
                targetVariablesNames = "",
                minNumberOfMultipliersInAnswer = "",
                maxNumberOfDivisionsInAnswer = "",
                additionalFactsIdentifiers = "",
                maxExpressionTransformationWeight = "1.0",
                unlimitedWellKnownFunctions = "", //functions, which null-weight transformations allowed with any other transformations, split by configSeparator
                shortErrorDescription = "0", //crop parsed steps from error description
                taskContextExpressionTransformationRules = "", //for expression transformation rules based on variables
                allowedVariablesNames = "", //Variables expressions for which learner need to deduce, split by configSeparator
                maxDistBetweenDiffSteps = "", //is it allowed to differentiate expression in one step
                forbiddenFunctions = "d" //functions cannot been used in answer
        )

        val logRef = log.getLogInPlainText()

        assert(!result.contains("Error"))
        assert(!result.contains("#FF"))
        Assert.assertEquals("<math xmlns=\"http://www.w3.org/1998/Math/MathML\" mathcolor=\"#7F00FF\"><mo>(</mo><msup><mrow><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow></msup><mo>)</mo><mo>'</mo><mrow mathvariant=\"bold\" mathcolor=\"#007F00\"><mo>=</mo></mrow><mo>(</mo><msup><mi>e</mi><mrow><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>)</mo><mo>'</mo><mrow mathvariant=\"bold\" mathcolor=\"#007F00\"><mo>=</mo></mrow><msup><mi>e</mi><mrow><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>*</mo><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>)</mo><mo>'</mo><mrow mathvariant=\"bold\" mathcolor=\"#007F00\"><mo>=</mo></mrow><msup><mi>e</mi><mrow><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>*</mo><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>+</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mfrac><mrow><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>'</mo></mrow><mrow><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow></mfrac><mo>)</mo><mrow mathvariant=\"bold\" mathcolor=\"#007F00\"><mo>=</mo></mrow><msup><mi>e</mi><mrow><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>*</mo><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>-</mo><mfrac><mrow><msup><mrow><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mn>2</mn></msup></mrow><mrow><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow></mfrac><mo>)</mo></math>",
                result)
    }

    @Test
    fun xInSinCorrect() {
        val result = checkFactsInMathML(
                brushedMathML = "<math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mo>(</mo><msup><mi>x</mi><mrow><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow></msup><mo>)</mo><mo>'</mo><mo>=</mo><mo>(</mo><msup><mi>e</mi><mrow><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow></msup><mo>)</mo><mo>'</mo><mo>=</mo><msup><mi>e</mi><mrow><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow></msup><mo>*</mo><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>'</mo><mo>=</mo><msup><mi>e</mi><mrow><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow></msup><mo>*</mo><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>+</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mfrac><mn>1</mn><mi>x</mi></mfrac><mo>)</mo></math>",
                wellKnownFunctions = "",
                expressionTransformationRules = " ",
                targetFactIdentifier = "(d(^(x;sin(x))))",
                targetVariablesNames = "",
                minNumberOfMultipliersInAnswer = "",
                maxNumberOfDivisionsInAnswer = "",
                additionalFactsIdentifiers = "",
                maxExpressionTransformationWeight = "1.0",
                unlimitedWellKnownFunctions = "", //functions, which null-weight transformations allowed with any other transformations, split by configSeparator
                shortErrorDescription = "0", //crop parsed steps from error description
                taskContextExpressionTransformationRules = "", //for expression transformation rules based on variables
                allowedVariablesNames = "", //Variables expressions for which learner need to deduce, split by configSeparator
                maxDistBetweenDiffSteps = "", //is it allowed to differentiate expression in one step
                forbiddenFunctions = "d" //functions cannot been used in answer
        )

        val logRef = log.getLogInPlainText()

        assert(!result.contains("Error"))
        assert(!result.contains("#FF"))
        Assert.assertEquals("<math xmlns=\"http://www.w3.org/1998/Math/MathML\" mathcolor=\"#7F00FF\"><mo>(</mo><msup><mi>x</mi><mrow><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow></msup><mo>)</mo><mo>'</mo><mrow mathvariant=\"bold\" mathcolor=\"#007F00\"><mo>=</mo></mrow><mo>(</mo><msup><mi>e</mi><mrow><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow></msup><mo>)</mo><mo>'</mo><mrow mathvariant=\"bold\" mathcolor=\"#007F00\"><mo>=</mo></mrow><msup><mi>e</mi><mrow><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow></msup><mo>*</mo><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>'</mo><mrow mathvariant=\"bold\" mathcolor=\"#007F00\"><mo>=</mo></mrow><msup><mi>e</mi><mrow><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow></msup><mo>*</mo><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>+</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mfrac><mn>1</mn><mi>x</mi></mfrac><mo>)</mo></math>",
                result)
    }

    @Test
    fun xInSinWrong() {
        val result = checkFactsInMathML(
                brushedMathML = "<math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mo>(</mo><msup><mi>x</mi><mrow><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow></msup><mo>)</mo><mo>'</mo><mo>=</mo><mo>(</mo><msup><mi>e</mi><mrow><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow></msup><mo>)</mo><mo>'</mo><mo>=</mo><msup><mi>e</mi><mrow><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow></msup><mo>*</mo><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>'</mo><mo>=</mo><msup><mi>e</mi><mrow><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow></msup><mo>*</mo><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>+</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mfrac><mn>1</mn><mi>x</mi></mfrac><mo>)</mo></math>",
                wellKnownFunctions = "",
                expressionTransformationRules = " ",
                targetFactIdentifier = "(d(^(x;sin(x))))",
                targetVariablesNames = "",
                minNumberOfMultipliersInAnswer = "",
                maxNumberOfDivisionsInAnswer = "",
                additionalFactsIdentifiers = "",
                maxExpressionTransformationWeight = "1.0",
                unlimitedWellKnownFunctions = "", //functions, which null-weight transformations allowed with any other transformations, split by configSeparator
                shortErrorDescription = "0", //crop parsed steps from error description
                taskContextExpressionTransformationRules = "", //for expression transformation rules based on variables
                allowedVariablesNames = "", //Variables expressions for which learner need to deduce, split by configSeparator
                maxDistBetweenDiffSteps = "", //is it allowed to differentiate expression in one step
                forbiddenFunctions = "d" //functions cannot been used in answer
        )

        val logRef = log.getLogInPlainText()

        assert(result.contains("Error"))
        assert(result.contains("#FF"))
        Assert.assertEquals("<math xmlns=\"http://www.w3.org/1998/Math/MathML\" mathcolor=\"#7F00FF\"><mo>(</mo><msup><mi>x</mi><mrow><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow></msup><mo>)</mo><mo>'</mo><mrow mathvariant=\"bold\" mathcolor=\"#007F00\"><mo>=</mo></mrow><mo>(</mo><msup><mi>e</mi><mrow><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow></msup><mo>)</mo><mo>'</mo><mrow mathvariant=\"bold\" mathcolor=\"#007F00\"><mo>=</mo></mrow><msup><mi>e</mi><mrow><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow></msup><mo>*</mo><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>'</mo><mrow mathvariant=\"bold\" mathcolor=\"#FF0000\"><mo>=</mo></mrow><msup><mi>e</mi><mrow><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow></msup><mo>*</mo><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>+</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mfrac><mn>1</mn><mi>x</mi></mfrac><mo>)</mo><mspace linebreak=\"newline\"/><mtext mathvariant=\"bold\" mathcolor=\"#FF0000\">Error: Unclear transformation between '(*(^(2.7182818284590452353602874713526;*(sin(x);ln(x)));d(*(sin(x);ln(x)))))' and '(*(^(2.7182818284590452353602874713526;*(sin(x);ln(x)));+(*(cos(x);ln(x));*(cos(x);/(1;x)))))' </mtext></math>",
                result)
    }

    @Test
    fun cosInSinInChCorrect() {
        val result = checkFactsInMathML(
                brushedMathML = "<math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mo>[</mo><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>)</mo><mo>'</mo><mo mathvariant=\"bold\" mathcolor=\"#007F00\">=</mo><mi>s</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>+</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mfrac><mrow><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>'</mo></mrow><mrow><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow></mfrac><mo mathvariant=\"bold\" mathcolor=\"#007F00\">=</mo><mi>s</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>+</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>c</mi><mi>t</mi><mi>g</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>]</mo><mspace linebreak=\"newline\"/><mo>[</mo><mo>(</mo><msup><mrow><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>)</mo><mo>'</mo><mo mathvariant=\"bold\" mathcolor=\"#007F00\">=</mo><mo>(</mo><msup><mi>e</mi><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>)</mo><mo>'</mo><mo mathvariant=\"bold\" mathcolor=\"#007F00\">=</mo><msup><mi>e</mi><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>*</mo><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>)</mo><mo>'</mo><mo mathvariant=\"bold\" mathcolor=\"#FF0000\">=</mo><mo>(</mo><mi>s</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>+</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>c</mi><mi>t</mi><mi>g</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><msup><mi>e</mi><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo mathvariant=\"bold\" mathcolor=\"#FF0000\">=</mo><mo>(</mo><mi>s</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>+</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>c</mi><mi>t</mi><mi>g</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><msup><mrow><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>]</mo><mspace linebreak=\"newline\"/><mo>[</mo><mo>(</mo><msup><mrow><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>*</mo><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>)</mo><mo>'</mo><mo>=</mo><mo>(</mo><msup><mrow><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>)</mo><mo>'</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>+</mo><msup><mrow><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>*</mo><mfrac><mrow><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>'</mo></mrow><mrow><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow></mfrac><mo>=</mo><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>*</mo><mo>(</mo><mi>s</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>+</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>c</mi><mi>t</mi><mi>g</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><msup><mrow><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>+</mo><msup><mrow><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>*</mo><mfrac><mrow><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>'</mo></mrow><mrow><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow></mfrac><mo>=</mo><mspace linebreak=\"newline\"/><mo>=</mo><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>*</mo><mo>(</mo><mi>s</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>+</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>c</mi><mi>t</mi><mi>g</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><msup><mrow><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>-</mo><msup><mrow><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>*</mo><mi>t</mi><mi>g</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>=</mo><mo>(</mo><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>*</mo><mo>(</mo><mi>s</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>+</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>c</mi><mi>t</mi><mi>g</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>&#xA0;</mo><mo>-</mo><mo>&#xA0;</mo><mi>t</mi><mi>g</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><msup><mrow><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>]</mo><mspace linebreak=\"newline\"/><mo>(</mo><msup><mrow><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><msup><mrow><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup></msup><mo>)</mo><mo>'</mo><mo>=</mo><mo>(</mo><msup><mi>e</mi><mrow><msup><mrow><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>*</mo><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>)</mo><mo>'</mo><mo>=</mo><msup><mi>e</mi><mrow><msup><mrow><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>*</mo><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>*</mo><mo>(</mo><msup><mrow><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>*</mo><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>)</mo><mo>'</mo><mo>=</mo><msup><mrow><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><msup><mrow><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup></msup><mo>*</mo><mo>(</mo><msup><mrow><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>*</mo><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>)</mo><mo>'</mo><mo>=</mo><msup><mrow><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><msup><mrow><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup></msup><mo>*</mo><msup><mrow><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>*</mo><mo>(</mo><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>*</mo><mo>(</mo><mi>s</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>+</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>c</mi><mi>t</mi><mi>g</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>&#xA0;</mo><mo>-</mo><mo>&#xA0;</mo><mi>t</mi><mi>g</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mspace linebreak=\"newline\"/><mtext mathvariant=\"bold\" mathcolor=\"#FF0000\">Error: Unclear transformation between '(*(^(2.7182818284590452353602874713526;*(ch(x);ln(sin(x))));d(*(ch(x);ln(sin(x))))))' and '(*(+(*(sh(x);ln(sin(x)));*(ch(x);ctg(x)));^(sin(x);ch(x))))'</mtext></math>",
                wellKnownFunctions = "",
                expressionTransformationRules = " ",
                targetFactIdentifier = "(d(^(cos(x);^(sin(x);ch(x)))))",
                targetVariablesNames = "",
                minNumberOfMultipliersInAnswer = "",
                maxNumberOfDivisionsInAnswer = "",
                additionalFactsIdentifiers = "",
                maxExpressionTransformationWeight = "1.0",
                unlimitedWellKnownFunctions = "", //functions, which null-weight transformations allowed with any other transformations, split by configSeparator
                shortErrorDescription = "0", //crop parsed steps from error description
                taskContextExpressionTransformationRules = "", //for expression transformation rules based on variables
                allowedVariablesNames = "", //Variables expressions for which learner need to deduce, split by configSeparator
                maxDistBetweenDiffSteps = "", //is it allowed to differentiate expression in one step
                forbiddenFunctions = "d" //functions cannot been used in answer
        )

        val logRef = log.getLogInPlainText()

        assert(!result.contains("Error"))
        assert(!result.contains("#FF"))
        Assert.assertEquals("<math xmlns=\"http://www.w3.org/1998/Math/MathML\" mathcolor=\"#7F00FF\"><mo>[</mo><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>)</mo><mo>'</mo><mrow mathvariant=\"bold\" mathcolor=\"#007F00\"><mo>=</mo></mrow><mi>s</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>+</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mfrac><mrow><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>'</mo></mrow><mrow><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow></mfrac><mrow mathvariant=\"bold\" mathcolor=\"#007F00\"><mo>=</mo></mrow><mi>s</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>+</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>c</mi><mi>t</mi><mi>g</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>]</mo><mspace linebreak=\"newline\"/><mo>[</mo><mo>(</mo><msup><mrow><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>)</mo><mo>'</mo><mrow mathvariant=\"bold\" mathcolor=\"#007F00\"><mo>=</mo></mrow><mo>(</mo><msup><mi>e</mi><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>)</mo><mo>'</mo><mrow mathvariant=\"bold\" mathcolor=\"#007F00\"><mo>=</mo></mrow><msup><mi>e</mi><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>*</mo><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>)</mo><mo>'</mo><mrow mathvariant=\"bold\" mathcolor=\"#007F00\"><mo>=</mo></mrow><mo>(</mo><mi>s</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>+</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>c</mi><mi>t</mi><mi>g</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><msup><mi>e</mi><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mrow mathvariant=\"bold\" mathcolor=\"#007F00\"><mo>=</mo></mrow><mo>(</mo><mi>s</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>+</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>c</mi><mi>t</mi><mi>g</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><msup><mrow><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>]</mo><mspace linebreak=\"newline\"/><mo>[</mo><mo>(</mo><msup><mrow><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>*</mo><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>)</mo><mo>'</mo><mrow mathvariant=\"bold\" mathcolor=\"#007F00\"><mo>=</mo></mrow><mo>(</mo><msup><mrow><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>)</mo><mo>'</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>+</mo><msup><mrow><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>*</mo><mfrac><mrow><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>'</mo></mrow><mrow><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow></mfrac><mrow mathvariant=\"bold\" mathcolor=\"#007F00\"><mo>=</mo></mrow><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>*</mo><mo>(</mo><mi>s</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>+</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>c</mi><mi>t</mi><mi>g</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><msup><mrow><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>+</mo><msup><mrow><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>*</mo><mfrac><mrow><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>'</mo></mrow><mrow><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow></mfrac><mrow mathvariant=\"bold\" mathcolor=\"#007F00\"><mo>=</mo></mrow><mspace linebreak=\"newline\"/><mo>=</mo><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>*</mo><mo>(</mo><mi>s</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>+</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>c</mi><mi>t</mi><mi>g</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><msup><mrow><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>-</mo><msup><mrow><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>*</mo><mi>t</mi><mi>g</mi><mo>(</mo><mi>x</mi><mo>)</mo><mrow mathvariant=\"bold\" mathcolor=\"#007F00\"><mo>=</mo></mrow><mo>(</mo><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>*</mo><mo>(</mo><mi>s</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>+</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>c</mi><mi>t</mi><mi>g</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>&#xA0;</mo><mo>-</mo><mo>&#xA0;</mo><mi>t</mi><mi>g</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><msup><mrow><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>]</mo><mspace linebreak=\"newline\"/><mo>(</mo><msup><mrow><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><msup><mrow><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup></msup><mo>)</mo><mo>'</mo><mrow mathvariant=\"bold\" mathcolor=\"#007F00\"><mo>=</mo></mrow><mo>(</mo><msup><mi>e</mi><mrow><msup><mrow><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>*</mo><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>)</mo><mo>'</mo><mrow mathvariant=\"bold\" mathcolor=\"#007F00\"><mo>=</mo></mrow><msup><mi>e</mi><mrow><msup><mrow><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>*</mo><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>*</mo><mo>(</mo><msup><mrow><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>*</mo><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>)</mo><mo>'</mo><mrow mathvariant=\"bold\" mathcolor=\"#007F00\"><mo>=</mo></mrow><msup><mrow><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><msup><mrow><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup></msup><mo>*</mo><mo>(</mo><msup><mrow><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>*</mo><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>)</mo><mo>'</mo><mrow mathvariant=\"bold\" mathcolor=\"#007F00\"><mo>=</mo></mrow><msup><mrow><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><msup><mrow><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup></msup><mo>*</mo><msup><mrow><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>*</mo><mo>(</mo><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>*</mo><mo>(</mo><mi>s</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>+</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>c</mi><mi>t</mi><mi>g</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>&#xA0;</mo><mo>-</mo><mo>&#xA0;</mo><mi>t</mi><mi>g</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></math>",
                result)
    }

    @Test
    fun cosInSinInChExtraBracket() {
        val result = checkFactsInMathML(
                brushedMathML = "<math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mo>[</mo><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>)</mo><mo>'</mo><mo>=</mo><mi>s</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>)</mo><mo>+</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mfrac><mrow><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>'</mo></mrow><mrow><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow></mfrac><mo>=</mo><mi>s</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>)</mo><mo>+</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>c</mi><mi>t</mi><mi>g</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>]</mo><mspace linebreak=\"newline\"/><mo>[</mo><mo>(</mo><mo>(</mo><mi>sin</mi><msup><mrow><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>)</mo><mo>'</mo><mo>=</mo><mo>(</mo><msup><mi>e</mi><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>)</mo><mo>'</mo><mo>=</mo><mo>(</mo><mo>(</mo><mi>sin</mi><msup><mrow><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>*</mo><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>)</mo><mo>'</mo><mo>=</mo><mo>(</mo><mi>s</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>+</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>c</mi><mi>t</mi><mi>g</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>(</mo><mi>sin</mi><msup><mrow><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>]</mo><mspace linebreak=\"newline\"/><mo>[</mo><mo>(</mo><mo>(</mo><mi>sin</mi><msup><mrow><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>*</mo><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>)</mo><mo>'</mo><mo>=</mo><mo>(</mo><mo>(</mo><mi>sin</mi><msup><mrow><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>)</mo><mo>'</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>+</mo><mo>(</mo><mi>sin</mi><msup><mrow><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>*</mo><mfrac><mrow><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>'</mo></mrow><mrow><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow></mfrac><mo>=</mo><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>*</mo><mo>(</mo><mi>s</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>+</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>c</mi><mi>t</mi><mi>g</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>(</mo><mi>sin</mi><msup><mrow><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>+</mo><mo>(</mo><mi>sin</mi><msup><mrow><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>*</mo><mfrac><mrow><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>'</mo></mrow><mrow><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow></mfrac><mo>=</mo><mspace linebreak=\"newline\"/><mo>=</mo><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>*</mo><mo>(</mo><mi>s</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>+</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>c</mi><mi>t</mi><mi>g</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>(</mo><mi>sin</mi><msup><mrow><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>-</mo><mo>(</mo><mi>sin</mi><msup><mrow><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>*</mo><mi>t</mi><mi>g</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>=</mo><mo>(</mo><mo>(</mo><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>*</mo><mo>(</mo><mi>s</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>+</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>c</mi><mi>t</mi><mi>g</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>&#xA0;</mo><mo>-</mo><mo>&#xA0;</mo><mi>t</mi><mi>g</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>(</mo><mi>sin</mi><msup><mrow><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>]</mo><mspace linebreak=\"newline\"/><mo>(</mo><mo>(</mo><mi>cos</mi><msup><mrow><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>sin</mi><msup><mrow><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup></mrow></msup><mo>)</mo><mo>'</mo><mo>=</mo><mo>(</mo><msup><mi>e</mi><mrow><mo>(</mo><mi>sin</mi><msup><mrow><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>*</mo><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>)</mo><mo>'</mo><mo>=</mo><msup><mi>e</mi><mrow><mo>(</mo><mi>sin</mi><msup><mrow><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>*</mo><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>*</mo><mo>(</mo><mo>(</mo><mi>sin</mi><msup><mrow><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>*</mo><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>)</mo><mo>'</mo><mo>=</mo><mo>(</mo><mi>cos</mi><msup><mrow><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>sin</mi><msup><mrow><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup></mrow></msup><mo>*</mo><mo>(</mo><mo>(</mo><mi>sin</mi><msup><mrow><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>*</mo><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>)</mo><mo>'</mo><mo>=</mo><mo>(</mo><mi>cos</mi><msup><mrow><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>sin</mi><msup><mrow><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup></mrow></msup><mo>*</mo><mo>(</mo><mi>sin</mi><msup><mrow><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>*</mo><mo>(</mo><mo>(</mo><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>*</mo><mo>(</mo><mi>s</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>+</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>c</mi><mi>t</mi><mi>g</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>&#xA0;</mo><mo>-</mo><mo>&#xA0;</mo><mi>t</mi><mi>g</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></math>",
                wellKnownFunctions = "",
                expressionTransformationRules = " ",
                targetFactIdentifier = "(d(^(cos(x);^(sin(x);ch(x)))))",
                targetVariablesNames = "",
                minNumberOfMultipliersInAnswer = "",
                maxNumberOfDivisionsInAnswer = "",
                additionalFactsIdentifiers = "",
                maxExpressionTransformationWeight = "1.0",
                unlimitedWellKnownFunctions = "", //functions, which null-weight transformations allowed with any other transformations, split by configSeparator
                shortErrorDescription = "0", //crop parsed steps from error description
                taskContextExpressionTransformationRules = "", //for expression transformation rules based on variables
                allowedVariablesNames = "", //Variables expressions for which learner need to deduce, split by configSeparator
                maxDistBetweenDiffSteps = "", //is it allowed to differentiate expression in one step
                forbiddenFunctions = "d" //functions cannot been used in answer
        )

        val logRef = log.getLogInPlainText()

        assert(result.contains("Error", ignoreCase = true))
        assert(result.contains("#FF"))
        Assert.assertEquals("<math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mo>[</mo><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>)</mo><mo>'</mo><mo>=</mo><mi>s</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>)</mo><mo>+</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mfrac><mrow><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>'</mo></mrow><mrow><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow></mfrac><mo>=</mo><mi>s</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>)</mo><mo>+</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>c</mi><mi>t</mi><mi>g</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>]</mo><mspace linebreak=\"newline\"/><mo>[</mo><mo>(</mo><mo>(</mo><mi>sin</mi><msup><mrow><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>)</mo><mo>'</mo><mo>=</mo><mo>(</mo><msup><mi>e</mi><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>)</mo><mo>'</mo><mo>=</mo><mo>(</mo><mo>(</mo><mi>sin</mi><msup><mrow><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>*</mo><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>)</mo><mo>'</mo><mo>=</mo><mo>(</mo><mi>s</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>+</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>c</mi><mi>t</mi><mi>g</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>(</mo><mi>sin</mi><msup><mrow><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>]</mo><mspace linebreak=\"newline\"/><mo>[</mo><mo>(</mo><mo>(</mo><mi>sin</mi><msup><mrow><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>*</mo><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>)</mo><mo>'</mo><mo>=</mo><mo>(</mo><mo>(</mo><mi>sin</mi><msup><mrow><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>)</mo><mo>'</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>+</mo><mo>(</mo><mi>sin</mi><msup><mrow><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>*</mo><mfrac><mrow><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>'</mo></mrow><mrow><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow></mfrac><mo>=</mo><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>*</mo><mo>(</mo><mi>s</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>+</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>c</mi><mi>t</mi><mi>g</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>(</mo><mi>sin</mi><msup><mrow><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>+</mo><mo>(</mo><mi>sin</mi><msup><mrow><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>*</mo><mfrac><mrow><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>'</mo></mrow><mrow><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow></mfrac><mo>=</mo><mspace linebreak=\"newline\"/><mo>=</mo><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>*</mo><mo>(</mo><mi>s</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>+</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>c</mi><mi>t</mi><mi>g</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>(</mo><mi>sin</mi><msup><mrow><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>-</mo><mo>(</mo><mi>sin</mi><msup><mrow><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>*</mo><mi>t</mi><mi>g</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>=</mo><mo>(</mo><mo>(</mo><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>*</mo><mo>(</mo><mi>s</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>+</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>c</mi><mi>t</mi><mi>g</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>&#xA0;</mo><mo>-</mo><mo>&#xA0;</mo><mi>t</mi><mi>g</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>(</mo><mi>sin</mi><msup><mrow><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>]</mo><mspace linebreak=\"newline\"/><mo>(</mo><mo>(</mo><mi>cos</mi><msup><mrow><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>sin</mi><msup><mrow><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup></mrow></msup><mo>)</mo><mo>'</mo><mo>=</mo><mo>(</mo><msup><mi>e</mi><mrow><mo>(</mo><mi>sin</mi><msup><mrow><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>*</mo><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>)</mo><mo>'</mo><mo>=</mo><msup><mi>e</mi><mrow><mo>(</mo><mi>sin</mi><msup><mrow><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>*</mo><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>*</mo><mo>(</mo><mo>(</mo><mi>sin</mi><msup><mrow><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>*</mo><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>)</mo><mo>'</mo><mo>=</mo><mo>(</mo><mi>cos</mi><msup><mrow><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>sin</mi><msup><mrow><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup></mrow></msup><mo>*</mo><mo>(</mo><mo>(</mo><mi>sin</mi><msup><mrow><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>*</mo><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>)</mo><mo>'</mo><mo>=</mo><mo>(</mo><mi>cos</mi><msup><mrow><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>sin</mi><msup><mrow><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup></mrow></msup><mo>*</mo><mo>(</mo><mi>sin</mi><msup><mrow><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow><mrow><mo>(</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo></mrow></msup><mo>*</mo><menclose mathcolor=\"#7F0000\" notation=\"bottom\"><mo>(</mo></menclose><mo>(</mo><mi>ln</mi><mo>(</mo><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>*</mo><mo>(</mo><mi>s</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>ln</mi><mo>(</mo><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>+</mo><mi>c</mi><mi>h</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>*</mo><mi>c</mi><mi>t</mi><mi>g</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mo>&#xA0;</mo><mo>-</mo><mo>&#xA0;</mo><mi>t</mi><mi>g</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>)</mo><mspace linebreak=\"newline\"/><mtext mathvariant=\"bold\" mathcolor=\"#FF0000\">Syntax&#xA0;error&#xA0;(underlined): Not closed bracket: '('</mtext></math>",
                result)
    }

    @Test
    @Ignore
    fun oldIdentifierToNew() {
        val factConstructorViewer: FactConstructorViewer = FactConstructorViewer()
        val fact = parseFromFactIdentifier("d(cos(x)^sin(x))")!!
        val newIdentifier = factConstructorViewer.constructIdentifierByFact(fact)
        print(newIdentifier)
    }
}