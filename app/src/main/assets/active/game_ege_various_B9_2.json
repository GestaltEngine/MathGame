{
  "taskSet": {
    "code": "ege_various_B9_2",
    "version": 0,
    "namespaceCode": "",
    "nameEn": "EGE Various B9 2.0",
    "nameRu": "ЕГЭ Разнообразный B9 2.0",
    "subjectType": "standard_math",
    "tasks": [
      {
        "code": "ege_various_B9_2_01",
        "version": 0,
        "namespaceCode": "",
        "nameEn": "Level 1",
        "nameRu": "Уровень 1",
        "descriptionShortEn": "Вычислить при sin(x)\u003d0.6",
        "descriptionShortRu": "Вычислить при sin(x)\u003d0.6",
        "originalExpressionStructureString": "(/(*(10;sin(*(2;x)));*(6;cos(x))))",
        "goalExpressionStructureString": "",
        "goalPattern": "?:0:?:?N",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "Logarithm"
          }
        ],
        "rules": [
          {
            "leftStructureString": "(sin(x))",
            "rightStructureString": "(0.6)",
            "basedOnTaskContext": true
          },
          {
            "leftStructureString": "(/(0.6,6))",
            "rightStructureString": "(0.1)"
          }
        ],
        "stepsNumber": 8,
        "time": 90,
        "difficulty": 2.0,
        "otherCheckSolutionData": {}
      },
      {
        "code": "ege_various_B9_2_02",
        "version": 0,
        "namespaceCode": "",
        "nameEn": "Level 2",
        "nameRu": "Уровень 2",
        "descriptionShortEn": "Вычислить",
        "descriptionShortRu": "Вычислить",
        "originalExpressionStructureString": "(+(10;*((+(x;3));(+(x;-(3))));-(^(x;2))))",
        "goalExpressionStructureString": "",
        "goalPattern": "?:0:?:?N",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "Logarithm"
          }
        ],
        "rules": [],
        "stepsNumber": 6,
        "time": 90,
        "difficulty": 2.0,
        "otherCheckSolutionData": {}
      },
      {
        "code": "ege_various_B9_2_03",
        "version": 0,
        "namespaceCode": "",
        "nameEn": "Level 3",
        "nameRu": "Уровень 3",
        "descriptionShortEn": "Вычислить",
        "descriptionShortRu": "Вычислить",
        "originalExpressionStructureString": "(/(30;+(^(cos(/(π;7));2);^(cos(/(*(5;π);14));2);1)))",
        "goalExpressionStructureString": "",
        "goalPattern": "?:0:?:?N",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "TrigonometryCompleteTgCtg"
          }
        ],
        "rules": [],
        "stepsNumber": 6,
        "time": 100,
        "difficulty": 2.0,
        "otherCheckSolutionData": {}
      },
      {
        "code": "ege_various_B9_2_04",
        "version": 0,
        "namespaceCode": "",
        "nameEn": "Level 4",
        "nameRu": "Уровень 4",
        "descriptionShortEn": "Вычислить",
        "descriptionShortRu": "Вычислить",
        "originalExpressionStructureString": "(+(^(3;0.5);-(*(^(12;0.5);^(sin(/(*(5;π);12));2)))))",
        "goalExpressionStructureString": "",
        "goalPattern": "?:0:?:?R",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "TrigonometryCompleteTgCtg"
          }
        ],
        "rules": [],
        "stepsNumber": 17,
        "time": 200,
        "difficulty": 5.0,
        "otherCheckSolutionData": {}
      },
      {
        "code": "test_05",
        "version": 0,
        "namespaceCode": "",
        "nameEn": "Level 5",
        "nameRu": "Уровень 5",
        "descriptionShortEn": "Вычислить",
        "descriptionShortRu": "Вычислить",
        "originalExpressionStructureString": "(/(+(^(*(5;a);2);-(*(5;a)));+(*(5;^(a;2));-(a))))",
        "goalExpressionStructureString": "",
        "goalPattern": "?:0:?:?N",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "Logarithm"
          }
        ],
        "rules": [],
        "stepsNumber": 13,
        "time": 160,
        "difficulty": 4.0,
        "otherCheckSolutionData": {}
      },
      {
        "code": "ege_various_B9_2_06",
        "version": 0,
        "namespaceCode": "",
        "nameEn": "Level 6",
        "nameRu": "Уровень 6",
        "descriptionShortEn": "Вычислить",
        "descriptionShortRu": "Вычислить",
        "originalExpressionStructureString": "(+(/(+(^(+(x;-(y));2);-(^(+(x;y);2)));*(4;x;y));2))",
        "goalExpressionStructureString": "",
        "goalPattern": "?:0:?:?N",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "Logarithm"
          }
        ],
        "rules": [],
        "stepsNumber": 19,
        "time": 130,
        "difficulty": 4.0,
        "otherCheckSolutionData": {}
      },
      {
        "code": "ege_various_B9_2_07",
        "version": 0,
        "namespaceCode": "",
        "nameEn": "Level 7",
        "nameRu": "Уровень 7",
        "descriptionShortEn": "Вычислить",
        "descriptionShortRu": "Вычислить",
        "originalExpressionStructureString": "(/(*(^(*(2;^(x;2));3);^(*(5;y);2));^(*(^(x;3);y);2)))",
        "goalExpressionStructureString": "",
        "goalPattern": "?:0:?:?N",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "Logarithm"
          }
        ],
        "rules": [],
        "stepsNumber": 16,
        "time": 180,
        "difficulty": 3.0,
        "otherCheckSolutionData": {}
      },
      {
        "code": "ege_various_B9_2_08",
        "version": 0,
        "namespaceCode": "",
        "nameEn": "Level 8",
        "nameRu": "Уровень 8",
        "descriptionShortEn": "Вычислить, если a \u003d 3b",
        "descriptionShortRu": "Вычислить, если a \u003d 3b",
        "originalExpressionStructureString": "(/(+(a;*(9;b);16);+(a;*(3;b);8)))",
        "goalExpressionStructureString": "",
        "goalPattern": "?:0:?:?N",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "Logarithm"
          }
        ],
        "rules": [
          {
            "leftStructureString": "(a)",
            "rightStructureString": "(*(3;b))",
            "basedOnTaskContext": true
          },
          {
            "leftStructureString": "(*(3;b))",
            "rightStructureString": "(a)",
            "basedOnTaskContext": true
          },
          {
            "leftStructureString": "(*(b;3))",
            "rightStructureString": "(a)",
            "basedOnTaskContext": true
          },
          {
            "leftStructureString": "(/(a;3))",
            "rightStructureString": "(b)",
            "basedOnTaskContext": true
          }
        ],
        "stepsNumber": 14,
        "time": 160,
        "difficulty": 3.0,
        "otherCheckSolutionData": {}
      },
      {
        "code": "ege_various_B9_2_09",
        "version": 0,
        "namespaceCode": "",
        "nameEn": "Level 9",
        "nameRu": "Уровень 9",
        "descriptionShortEn": "Вычислить",
        "descriptionShortRu": "Вычислить",
        "originalExpressionStructureString": "(/(+(*(12;^(^(x;5);6));-(*(4;^(^(x;3);10))));^(*(2;^(x;15));2)))",
        "goalExpressionStructureString": "",
        "goalPattern": "?:0:?:?N",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "Logarithm"
          }
        ],
        "rules": [],
        "stepsNumber": 12,
        "time": 90,
        "difficulty": 3.0,
        "otherCheckSolutionData": {}
      },
      {
        "code": "ege_various_B9_2_10",
        "version": 0,
        "namespaceCode": "",
        "nameEn": "Level 10",
        "nameRu": "Уровень 10",
        "descriptionShortEn": "Вычислить, если  y / x \u003d 2",
        "descriptionShortRu": "Вычислить, если  y / x \u003d 2",
        "originalExpressionStructureString": "(/(+(^(x;2);-(^(+(x;-(y));2)));*(x;y))))",
        "goalExpressionStructureString": "",
        "goalPattern": "?:0:?:?R",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "Logarithm"
          }
        ],
        "rules": [
          {
            "leftStructureString": "(2)",
            "rightStructureString": "(/(y;x))",
            "basedOnTaskContext": true
          },
          {
            "leftStructureString": "(/(y;x))",
            "rightStructureString": "(2)",
            "basedOnTaskContext": true
          },
          {
            "leftStructureString": "(y)",
            "rightStructureString": "(*(2;x))",
            "basedOnTaskContext": true
          },
          {
            "leftStructureString": "(*(2;x))",
            "rightStructureString": "(y)",
            "basedOnTaskContext": true
          }
        ],
        "stepsNumber": 10,
        "time": 90,
        "difficulty": 3.0,
        "otherCheckSolutionData": {}
      }
    ]
  },
  "rulePacks": [
    {
      "code": "ArithmeticSimplePositiveAddition",
      "version": 0,
      "namespaceCode": "",
      "subjectType": "standard_math",
      "rulePacks": [],
      "rules": [
        {
          "leftStructureString": "(+(a))",
          "rightStructureString": "(a)",
          "priority": 30
        },
        {
          "leftStructureString": "(+(a;b))",
          "rightStructureString": "(+(b;a))",
          "priority": 20,
          "isExtending": true
        },
        {
          "leftStructureString": "(a)",
          "rightStructureString": "(+(a;0))",
          "isExtending": true
        },
        {
          "code": "SimpleComputation",
          "priority": 5
        },
        {
          "code": "ZeroComputation",
          "priority": 5
        },
        {
          "code": "PositiveNumberPlusMinus1",
          "priority": 20
        },
        {
          "code": "ParentBracketsExpansion",
          "priority": 30
        },
        {
          "code": "ArgumentsSwap",
          "priority": 40
        },
        {
          "code": "ArgumentsPermutation",
          "priority": 40
        },
        {
          "code": "ArgumentsPermutationInOriginalOrder",
          "priority": 41
        }
      ]
    },
    {
      "code": "ArithmeticAddition",
      "version": 0,
      "namespaceCode": "",
      "subjectType": "standard_math",
      "rulePacks": [],
      "rules": [
        {
          "leftStructureString": "(+(a))",
          "rightStructureString": "(a)",
          "priority": 30
        },
        {
          "leftStructureString": "(+(a;b))",
          "rightStructureString": "(+(b;a))",
          "priority": 20,
          "isExtending": true
        },
        {
          "leftStructureString": "(a)",
          "rightStructureString": "(+(a;0))",
          "priority": 90,
          "isExtending": true
        },
        {
          "leftStructureString": "(+(-(+(-(a)))))",
          "rightStructureString": "(a)",
          "priority": 4
        },
        {
          "leftStructureString": "(-(+(-(a))))",
          "rightStructureString": "(a)",
          "priority": 4
        },
        {
          "leftStructureString": "(-(-(a)))",
          "rightStructureString": "(a)",
          "priority": 4
        },
        {
          "leftStructureString": "(a)",
          "rightStructureString": "(-(+(-(a))))",
          "priority": 95,
          "isExtending": true
        },
        {
          "leftStructureString": "(+(a;-(a)))",
          "rightStructureString": "(0)",
          "priority": 4
        },
        {
          "leftStructureString": "(+(-(a);a))",
          "rightStructureString": "(0)",
          "priority": 4
        },
        {
          "leftStructureString": "(+(a;+(-(a))))",
          "rightStructureString": "(0)",
          "priority": 4
        },
        {
          "leftStructureString": "(+(+(-(a));a))",
          "rightStructureString": "(0)",
          "priority": 4
        },
        {
          "code": "SimpleComputation",
          "priority": 5
        },
        {
          "code": "ZeroComputation",
          "priority": 5
        },
        {
          "code": "NumberPlusMinus1",
          "priority": 20
        },
        {
          "code": "MinusInOutBrackets",
          "priority": 31
        },
        {
          "code": "ParentBracketsExpansion",
          "priority": 30
        },
        {
          "code": "ArgumentsSwap",
          "priority": 40
        },
        {
          "code": "ArgumentsPermutation",
          "priority": 40
        },
        {
          "code": "ArgumentsPermutationInOriginalOrder",
          "priority": 41
        },
        {
          "code": "AdditiveComplicatingExtension",
          "priority": 92
        }
      ]
    },
    {
      "code": "ArithmeticMultiplication",
      "version": 0,
      "namespaceCode": "",
      "subjectType": "standard_math",
      "rulePacks": [
        {
          "namespaceCode": "",
          "rulePackCode": "ArithmeticAddition"
        }
      ],
      "rules": [
        {
          "leftStructureString": "(*(a;0))",
          "rightStructureString": "(0)",
          "priority": 4
        },
        {
          "leftStructureString": "(*(0;a))",
          "rightStructureString": "(0)",
          "priority": 4
        },
        {
          "leftStructureString": "(0)",
          "rightStructureString": "(*(a;0))",
          "isExtending": true
        },
        {
          "leftStructureString": "(*(a;1))",
          "rightStructureString": "(a)",
          "priority": 4
        },
        {
          "leftStructureString": "(*(1;a))",
          "rightStructureString": "(a)",
          "priority": 4
        },
        {
          "leftStructureString": "(a)",
          "rightStructureString": "(*(a;1))",
          "priority": 95,
          "isExtending": true
        },
        {
          "leftStructureString": "(*(a;b))",
          "rightStructureString": "(*(b;a))",
          "priority": 20,
          "isExtending": true
        },
        {
          "code": "OpeningBrackets",
          "priority": 30
        },
        {
          "code": "ReduceArithmetic",
          "priority": 10
        },
        {
          "code": "TwoSidesArithmeticReduce",
          "priority": 10
        },
        {
          "code": "MultiplicationFactorization",
          "priority": 15
        },
        {
          "leftStructureString": "(+(a;a))",
          "rightStructureString": "(*(2;a))"
        },
        {
          "leftStructureString": "(+(a;+(a)))",
          "rightStructureString": "(*(2;a))"
        },
        {
          "leftStructureString": "(+(+(a);a))",
          "rightStructureString": "(*(2;a))"
        },
        {
          "leftStructureString": "(*(2;a))",
          "rightStructureString": "(+(a;a))"
        },
        {
          "leftStructureString": "(+(a;*(a;n)))",
          "rightStructureString": "(*(a;+(n;1)))"
        },
        {
          "leftStructureString": "(*(a;+(n;1)))",
          "rightStructureString": "(+(a;*(a;n)))"
        },
        {
          "leftStructureString": "(+(*(a;n);a))",
          "rightStructureString": "(*(a;+(1;n)))"
        },
        {
          "leftStructureString": "(*(a;+(1;n)))",
          "rightStructureString": "(+(*(a;n);a))"
        },
        {
          "leftStructureString": "(-(*(A;C)))",
          "rightStructureString": "(*(+(-(A));C))"
        },
        {
          "leftStructureString": "(*(-(A);C))",
          "rightStructureString": "(+(-(*(A;C))))"
        },
        {
          "leftStructureString": "(-(*(A;C)))",
          "rightStructureString": "(*(A;+(-(C))))"
        },
        {
          "leftStructureString": "(*(A;-(C)))",
          "rightStructureString": "(+(-(*(A;C))))"
        },
        {
          "leftStructureString": "(*(A;-(C)))",
          "rightStructureString": "(*(+(-(A));C))"
        },
        {
          "leftStructureString": "(*(-(A);C))",
          "rightStructureString": "(*(A;+(-(C))))"
        },
        {
          "leftStructureString": "(+(-(*(A;C))))",
          "rightStructureString": "(*(+(-(A));C))"
        },
        {
          "leftStructureString": "(*(+(-(A));C))",
          "rightStructureString": "(+(-(*(A;C))))"
        },
        {
          "leftStructureString": "(+(-(*(A;C))))",
          "rightStructureString": "(*(A;+(-(C))))"
        },
        {
          "leftStructureString": "(*(A;+(-(C))))",
          "rightStructureString": "(+(-(*(A;C))))"
        },
        {
          "leftStructureString": "(*(A;+(-(C))))",
          "rightStructureString": "(*(+(-(A));C))"
        },
        {
          "leftStructureString": "(*(+(-(A));C))",
          "rightStructureString": "(*(A;+(-(C))))"
        },
        {
          "leftStructureString": "(*(-(A);-(B)))",
          "rightStructureString": "(*(A;B))"
        },
        {
          "leftStructureString": "(*(A;B))",
          "rightStructureString": "(*(+(-(A));+(-(B))))",
          "priority": 80,
          "isExtending": true
        },
        {
          "leftStructureString": "(*(+(-(A));+(-(B))))",
          "rightStructureString": "(*(A;B))"
        }
      ]
    },
    {
      "code": "ArithmeticDivision",
      "version": 0,
      "namespaceCode": "",
      "subjectType": "standard_math",
      "rulePacks": [
        {
          "namespaceCode": "",
          "rulePackCode": "ArithmeticMultiplication"
        }
      ],
      "rules": [
        {
          "leftStructureString": "(/(0;a))",
          "rightStructureString": "(0)",
          "priority": 4
        },
        {
          "leftStructureString": "(/(a;1))",
          "rightStructureString": "(a)",
          "priority": 4
        },
        {
          "leftStructureString": "(/(a;a))",
          "rightStructureString": "(1)",
          "priority": 4
        },
        {
          "leftStructureString": "(*(/(1;a);a))",
          "rightStructureString": "(1)",
          "priority": 4
        },
        {
          "leftStructureString": "(/(1;/(1;a)))",
          "rightStructureString": "(a)",
          "priority": 4,
          "matchJumbledAndNested": true
        },
        {
          "leftStructureString": "(a)",
          "rightStructureString": "(/(1;/(1;a)))",
          "priority": 90,
          "isExtending": true
        },
        {
          "leftStructureString": "(0.5)",
          "rightStructureString": "(/(1;2))",
          "priority": 15,
          "simpleAdditional": true
        },
        {
          "leftStructureString": "(/(1;2))",
          "rightStructureString": "(0.5)",
          "priority": 5,
          "simpleAdditional": true
        },
        {
          "leftStructureString": "(/(a;b))",
          "rightStructureString": "(/(*(a;b);*(b;b)))",
          "priority": 90,
          "isExtending": true
        },
        {
          "code": "MultiplicativeComplicatingExtension",
          "priority": 92
        },
        {
          "code": "ReduceFraction",
          "priority": 10
        },
        {
          "code": "DecimalToFraction",
          "priority": 15
        },
        {
          "leftStructureString": "(-(/(A;C)))",
          "rightStructureString": "(/(+(-(A));C))"
        },
        {
          "leftStructureString": "(/(-(A);C))",
          "rightStructureString": "(+(-(/(A;C))))"
        },
        {
          "leftStructureString": "(-(/(A;C)))",
          "rightStructureString": "(/(A;+(-(C))))"
        },
        {
          "leftStructureString": "(/(A;-(C)))",
          "rightStructureString": "(+(-(/(A;C))))"
        },
        {
          "leftStructureString": "(/(A;-(C)))",
          "rightStructureString": "(/(+(-(A));C))"
        },
        {
          "leftStructureString": "(/(-(A);C))",
          "rightStructureString": "(/(A;+(-(C))))"
        },
        {
          "leftStructureString": "(+(-(/(A;C))))",
          "rightStructureString": "(/(+(-(A));C))"
        },
        {
          "leftStructureString": "(/(+(-(A));C))",
          "rightStructureString": "(+(-(/(A;C))))"
        },
        {
          "leftStructureString": "(+(-(/(A;C))))",
          "rightStructureString": "(/(A;+(-(C))))"
        },
        {
          "leftStructureString": "(/(A;+(-(C))))",
          "rightStructureString": "(+(-(/(A;C))))"
        },
        {
          "leftStructureString": "(/(A;+(-(C))))",
          "rightStructureString": "(/(+(-(A));C))"
        },
        {
          "leftStructureString": "(/(+(-(A));C))",
          "rightStructureString": "(/(A;+(-(C))))"
        },
        {
          "leftStructureString": "(/(-(A);-(B)))",
          "rightStructureString": "(/(A;B))"
        },
        {
          "leftStructureString": "(/(A;B))",
          "rightStructureString": "(/(+(-(A));+(-(B))))",
          "priority": 80,
          "isExtending": true
        },
        {
          "leftStructureString": "(/(+(-(A));+(-(B))))",
          "rightStructureString": "(/(A;B))"
        },
        {
          "leftStructureString": "(+(/(B;C);/(A;D)))",
          "rightStructureString": "(/(+(*(B;D);*(C;A));*(C;D)))"
        },
        {
          "leftStructureString": "(+(/(B;C);-(/(A;D))))",
          "rightStructureString": "(/(+(*(B;D);-(*(C;A)));*(C;D)))"
        },
        {
          "leftStructureString": "(*(A;/(B;A)))",
          "rightStructureString": "(B)"
        },
        {
          "leftStructureString": "(*(/(B;A);A))",
          "rightStructureString": "(B)"
        },
        {
          "leftStructureString": "(*(A;/(B;C)))",
          "rightStructureString": "(/(*(A;B);C))"
        },
        {
          "leftStructureString": "(*(/(B;C);A))",
          "rightStructureString": "(/(*(A;B);C))"
        },
        {
          "leftStructureString": "(/(A;B))",
          "rightStructureString": "(/(1;/(B;A)))"
        },
        {
          "leftStructureString": "(/(1;/(B;A)))",
          "rightStructureString": "(/(A;B))"
        },
        {
          "leftStructureString": "(/(*(A;B);C))",
          "rightStructureString": "(*(A;/(B;C)))"
        },
        {
          "leftStructureString": "(/(/(B;C);A))",
          "rightStructureString": "(/(B;*(A;C)))"
        },
        {
          "leftStructureString": "(/(B;*(A;C)))",
          "rightStructureString": "(/(/(B;C);A))"
        },
        {
          "leftStructureString": "(/(A;/(B;C)))",
          "rightStructureString": "(/(*(A;C);B))"
        },
        {
          "leftStructureString": "(/(*(A;C);B))",
          "rightStructureString": "(/(A;/(B;C)))"
        },
        {
          "leftStructureString": "(/(A;*(B;C)))",
          "rightStructureString": "(*(/(A;B);/(1;C)))"
        },
        {
          "leftStructureString": "(/(A;*(B;C)))",
          "rightStructureString": "(*(/(1;B);/(A;C)))"
        },
        {
          "leftStructureString": "(*(/(A;B);/(1;C)))",
          "rightStructureString": "(/(A;*(B;C)))"
        },
        {
          "leftStructureString": "(*(/(1;B);/(A;C)))",
          "rightStructureString": "(/(A;*(B;C)))"
        },
        {
          "leftStructureString": "(*(/(D;B);/(A;C)))",
          "rightStructureString": "(/(*(D;A);*(B;C)))"
        },
        {
          "leftStructureString": "(/(*(D;A);*(B;C)))",
          "rightStructureString": "(*(/(D;B);/(A;C)))"
        },
        {
          "leftStructureString": "(/(*(D;A);*(B;A)))",
          "rightStructureString": "(/(D;B))"
        },
        {
          "leftStructureString": "(/(*(D;A);*(D;C)))",
          "rightStructureString": "(/(A;C))"
        },
        {
          "leftStructureString": "(/(*(D;A);D))",
          "rightStructureString": "(A)"
        },
        {
          "leftStructureString": "(/(*(A;D);D))",
          "rightStructureString": "(A)"
        }
      ]
    },
    {
      "code": "ArithmeticPow",
      "version": 0,
      "namespaceCode": "",
      "subjectType": "standard_math",
      "rulePacks": [
        {
          "namespaceCode": "",
          "rulePackCode": "ArithmeticDivision"
        }
      ],
      "rules": [
        {
          "leftStructureString": "(a)",
          "rightStructureString": "(^(a;1))",
          "priority": 95,
          "isExtending": true,
          "simpleAdditional": true
        },
        {
          "leftStructureString": "(1)",
          "rightStructureString": "(^(1;2))",
          "priority": 95,
          "isExtending": true,
          "simpleAdditional": true
        },
        {
          "leftStructureString": "(1)",
          "rightStructureString": "(^(1;3))",
          "priority": 95,
          "isExtending": true,
          "simpleAdditional": true
        },
        {
          "leftStructureString": "(/(1;a))",
          "rightStructureString": "(^(a;+(-(1))))",
          "priority": 80
        },
        {
          "leftStructureString": "(^(a;+(-(1))))",
          "rightStructureString": "(/(1;a))",
          "priority": 40
        },
        {
          "code": "PowFactorization",
          "priority": 15
        },
        {
          "leftStructureString": "(^(a;+(b;-(c))))",
          "rightStructureString": "(/(^(a;b);^(a;c)))"
        },
        {
          "leftStructureString": "(/(^(a;b);^(a;c)))",
          "rightStructureString": "(^(a;+(b;-(c))))"
        },
        {
          "leftStructureString": "(/(B;^(A;C)))",
          "rightStructureString": "(*(B;^(A;+(-(C)))))"
        },
        {
          "leftStructureString": "(*(B;^(A;+(-(C)))))",
          "rightStructureString": "(/(B;^(A;C)))"
        },
        {
          "leftStructureString": "(/(1;^(A;C)))",
          "rightStructureString": "(^(A;+(-(C))))"
        },
        {
          "leftStructureString": "(^(A;+(-(C))))",
          "rightStructureString": "(/(1;^(A;C)))"
        },
        {
          "leftStructureString": "(/(A;B))",
          "rightStructureString": "(^(/(B;A);+(-(1))))"
        },
        {
          "leftStructureString": "(^(/(B;A);+(-(1))))",
          "rightStructureString": "(/(A;B))"
        },
        {
          "leftStructureString": "(^(A;0))",
          "rightStructureString": "(1)",
          "priority": 5
        },
        {
          "leftStructureString": "(^(1;A))",
          "rightStructureString": "(1)",
          "priority": 5
        },
        {
          "leftStructureString": "(^(A;1))",
          "rightStructureString": "(A)",
          "priority": 5
        },
        {
          "leftStructureString": "(^(0;A))",
          "rightStructureString": "(0)",
          "priority": 5
        },
        {
          "leftStructureString": "(*(a;a))",
          "rightStructureString": "(^(a;2))",
          "priority": 40,
          "simpleAdditional": true
        },
        {
          "leftStructureString": "(^(a;2))",
          "rightStructureString": "(*(a;a))",
          "priority": 40,
          "simpleAdditional": true
        },
        {
          "leftStructureString": "(*(a;^(a;n)))",
          "rightStructureString": "(^(a;+(n;1)))"
        },
        {
          "leftStructureString": "(^(a;+(n;1)))",
          "rightStructureString": "(*(a;^(a;n)))"
        },
        {
          "leftStructureString": "(*(^(a;n);a))",
          "rightStructureString": "(^(a;+(1;n)))"
        },
        {
          "leftStructureString": "(^(a;+(1;n)))",
          "rightStructureString": "(*(^(a;n);a))"
        },
        {
          "leftStructureString": "(/(^(a;n);a))",
          "rightStructureString": "(^(a;+(n;-(1))))"
        },
        {
          "leftStructureString": "(^(a;+(n;-(1))))",
          "rightStructureString": "(/(^(a;n);a))"
        },
        {
          "leftStructureString": "(^(A;*(B;C)))",
          "rightStructureString": "(^(^(A;B);C))"
        },
        {
          "leftStructureString": "(^(^(A;B);C))",
          "rightStructureString": "(^(A;*(B;C)))"
        },
        {
          "leftStructureString": "(^(/(B;C);A))",
          "rightStructureString": "(/(^(B;A);^(C;A)))"
        },
        {
          "leftStructureString": "(/(^(B;A);^(C;A)))",
          "rightStructureString": "(^(/(B;C);A))"
        },
        {
          "leftStructureString": "(^(-(A);*(2;n)))",
          "rightStructureString": "(^(A;*(2;n)))"
        },
        {
          "leftStructureString": "(^(-(A);2))",
          "rightStructureString": "(^(A;2))"
        },
        {
          "leftStructureString": "(^(+(-(A));*(2;n)))",
          "rightStructureString": "(^(A;*(2;n)))"
        },
        {
          "leftStructureString": "(^(+(-(A));2))",
          "rightStructureString": "(^(A;2))"
        },
        {
          "leftStructureString": "(^(a;*(2;n)))",
          "rightStructureString": "(^(+(-(a));*(2;n)))"
        },
        {
          "leftStructureString": "(^(a;2))",
          "rightStructureString": "(^(+(-(a));2))"
        },
        {
          "leftStructureString": "(^(^(a;b);/(1;b)))",
          "rightStructureString": "(a)",
          "priority": 5
        }
      ]
    },
    {
      "code": "ArithmeticPowExtensions",
      "version": 0,
      "namespaceCode": "",
      "subjectType": "standard_math",
      "rulePacks": [
        {
          "namespaceCode": "",
          "rulePackCode": "ArithmeticPow"
        }
      ],
      "rules": [
        {
          "leftStructureString": "(a)",
          "rightStructureString": "(^(^(a;2);/(1;2)))",
          "priority": 96,
          "isExtending": true
        },
        {
          "leftStructureString": "(a)",
          "rightStructureString": "(^(^(a;3);/(1;3)))",
          "priority": 96,
          "isExtending": true
        }
      ]
    },
    {
      "code": "ShortMultiplication",
      "version": 0,
      "namespaceCode": "",
      "subjectType": "standard_math",
      "rulePacks": [
        {
          "namespaceCode": "",
          "rulePackCode": "ArithmeticPow"
        }
      ],
      "rules": [
        {
          "leftStructureString": "(+(^(a;2);-(^(b;2))))",
          "rightStructureString": "(*(+(a;-(b));+(a;b)))",
          "matchJumbledAndNested": true
        },
        {
          "leftStructureString": "(*(+(a;-(b));+(a;b)))",
          "rightStructureString": "(+(^(a;2);-(^(b;2))))",
          "matchJumbledAndNested": true
        },
        {
          "leftStructureString": "(^(+(a;b);2))",
          "rightStructureString": "(+(^(a;2);*(2;a;b);^(b;2)))",
          "matchJumbledAndNested": true
        },
        {
          "leftStructureString": "(+(^(a;2);*(2;a;b);^(b;2)))",
          "rightStructureString": "(^(+(a;b);2))",
          "matchJumbledAndNested": true
        },
        {
          "leftStructureString": "(+(^(a;2);*(2;a);1))",
          "rightStructureString": "(^(+(a;1);2))",
          "matchJumbledAndNested": true
        },
        {
          "leftStructureString": "(^(+(a;-(b));2))",
          "rightStructureString": "(+(^(a;2);-(*(2;a;b));^(b;2)))",
          "matchJumbledAndNested": true
        },
        {
          "leftStructureString": "(+(^(a;2);-(*(2;a;b));^(b;2)))",
          "rightStructureString": "(^(+(a;-(b));2))",
          "matchJumbledAndNested": true
        },
        {
          "leftStructureString": "(+(^(a;2);-(*(2;a));1))",
          "rightStructureString": "(^(+(a;-(1));2))",
          "matchJumbledAndNested": true
        },
        {
          "leftStructureString": "(^(+(a;b);3))",
          "rightStructureString": "(+(^(a;3);*(3;^(a;2);b);*(3;a;^(b;2));^(b;3)))",
          "matchJumbledAndNested": true
        },
        {
          "leftStructureString": "(+(^(a;3);*(3;^(a;2);b);*(3;a;^(b;2));^(b;3)))",
          "rightStructureString": "(^(+(a;b);3))",
          "matchJumbledAndNested": true
        },
        {
          "leftStructureString": "(+(^(a;3);*(3;^(a;2));*(3;a);1))",
          "rightStructureString": "(^(+(a;1);3))",
          "matchJumbledAndNested": true
        },
        {
          "leftStructureString": "(^(+(a;-(b));3))",
          "rightStructureString": "(+(^(a;3);-(*(3;^(a;2);b));*(3;a;^(b;2));-(^(b;3))))",
          "matchJumbledAndNested": true
        },
        {
          "leftStructureString": "(+(^(a;3);-(*(3;^(a;2);b));*(3;a;^(b;2));-(^(b;3))))",
          "rightStructureString": "(^(+(a;-(b));3))",
          "matchJumbledAndNested": true
        },
        {
          "leftStructureString": "(+(^(a;3);-(*(3;^(a;2)));*(3;a);-(1)))",
          "rightStructureString": "(^(+(a;-(1));3))",
          "matchJumbledAndNested": true
        },
        {
          "leftStructureString": "(+(^(a;3);-(^(b;3))))",
          "rightStructureString": "(*(+(a;-(b));+(^(a;2);*(a;b);^(b;2))))",
          "matchJumbledAndNested": true
        },
        {
          "leftStructureString": "(*(+(a;-(b));+(^(a;2);*(a;b);^(b;2))))",
          "rightStructureString": "(+(^(a;3);-(^(b;3))))",
          "matchJumbledAndNested": true
        },
        {
          "leftStructureString": "(*(+(a;-(1));+(^(a;2);a;1)))",
          "rightStructureString": "(+(^(a;3);-(^(1;3))))",
          "matchJumbledAndNested": true
        },
        {
          "leftStructureString": "(+(^(a;3);^(b;3)))",
          "rightStructureString": "(*(+(a;b);+(^(a;2);-(*(a;b));^(b;2))))",
          "matchJumbledAndNested": true
        },
        {
          "leftStructureString": "(*(+(a;b);+(^(a;2);-(*(a;b));^(b;2))))",
          "rightStructureString": "(+(^(a;3);^(b;3)))",
          "matchJumbledAndNested": true
        },
        {
          "leftStructureString": "(*(+(a;1);+(^(a;2);-(a);1)))",
          "rightStructureString": "(+(^(a;3);^(1;3)))",
          "matchJumbledAndNested": true
        }
      ]
    },
    {
      "code": "Logarithm",
      "version": 0,
      "namespaceCode": "",
      "subjectType": "standard_math",
      "rulePacks": [
        {
          "namespaceCode": "",
          "rulePackCode": "ShortMultiplication"
        }
      ],
      "rules": [
        {
          "leftStructureString": "(^(a;log(b;a)))",
          "rightStructureString": "(b)",
          "priority": 5
        },
        {
          "leftStructureString": "(log(1;A))",
          "rightStructureString": "(0)",
          "priority": 5
        },
        {
          "leftStructureString": "(log(A;A))",
          "rightStructureString": "(1)",
          "priority": 5
        },
        {
          "leftStructureString": "(log(*(b;c);a))",
          "rightStructureString": "(+(log(b;a);log(c;a)))"
        },
        {
          "leftStructureString": "(+(log(b;a);log(c;a)))",
          "rightStructureString": "(log(*(b;c);a))"
        },
        {
          "leftStructureString": "(log(*(b;c;d);a))",
          "rightStructureString": "(+(log(b;a);log(c;a);log(d;a)))"
        },
        {
          "leftStructureString": "(+(log(b;a);log(c;a);log(d;a)))",
          "rightStructureString": "(log(*(b;c;d);a))"
        },
        {
          "leftStructureString": "(log(*(b;c;d;e);a))",
          "rightStructureString": "(+(log(b;a);log(c;a);log(d;a);log(e;a)))"
        },
        {
          "leftStructureString": "(+(log(b;a);log(c;a);log(d;a);log(e;a)))",
          "rightStructureString": "(log(*(b;c;d;e);a))"
        },
        {
          "leftStructureString": "(log(/(b;c);a))",
          "rightStructureString": "(+(log(b;a);-(log(c;a))))"
        },
        {
          "leftStructureString": "(+(log(b;a);-(log(c;a))))",
          "rightStructureString": "(log(/(b;c);a))"
        },
        {
          "leftStructureString": "(log(^(b;c);a))",
          "rightStructureString": "(*(c;log(b;a)))"
        },
        {
          "leftStructureString": "(*(c;log(b;a)))",
          "rightStructureString": "(log(^(b;c);a))"
        },
        {
          "leftStructureString": "(*(log(b;a);c))",
          "rightStructureString": "(log(^(b;c);a))"
        },
        {
          "leftStructureString": "(log(b;^(a;k)))",
          "rightStructureString": "(/(log(b;a);k))"
        },
        {
          "leftStructureString": "(/(log(b;a);k))",
          "rightStructureString": "(log(b;^(a;k)))"
        },
        {
          "leftStructureString": "(/(1;log(b;a)))",
          "rightStructureString": "(log(a;b))"
        },
        {
          "leftStructureString": "(log(a;b))",
          "rightStructureString": "(/(1;log(b;a)))"
        },
        {
          "leftStructureString": "(/(log(c;a);log(b;a)))",
          "rightStructureString": "(log(c;b))"
        },
        {
          "leftStructureString": "(log(/(b;c);a))",
          "rightStructureString": "(+(-(log(/(c;b);a))))"
        },
        {
          "leftStructureString": "(+(-(log(/(c;b);a))))",
          "rightStructureString": "(log(/(b;c);a))"
        },
        {
          "leftStructureString": "(log(b;a))",
          "rightStructureString": "(+(-(log(/(1;b);a))))"
        },
        {
          "leftStructureString": "(+(-(log(/(1;b);a))))",
          "rightStructureString": "(log(b;a))"
        },
        {
          "leftStructureString": "(log(/(1;b);a))",
          "rightStructureString": "(+(-(log(b;a))))"
        },
        {
          "leftStructureString": "(+(-(log(b;a))))",
          "rightStructureString": "(log(/(1;b);a))"
        }
      ]
    },
    {
      "code": "Trigonometry",
      "version": 0,
      "namespaceCode": "",
      "subjectType": "standard_math",
      "rulePacks": [
        {
          "namespaceCode": "",
          "rulePackCode": "ArithmeticPow"
        }
      ],
      "rules": [
        {
          "leftStructureString": "(+(^(sin(a);2);^(cos(a);2)))",
          "rightStructureString": "(1)",
          "priority": 5,
          "matchJumbledAndNested": true
        },
        {
          "leftStructureString": "(+(1;-(^(sin(a);2))))",
          "rightStructureString": "(^(cos(a);2))",
          "matchJumbledAndNested": true
        },
        {
          "leftStructureString": "(^(cos(a);2))",
          "rightStructureString": "(+(1;-(^(sin(a);2))))",
          "matchJumbledAndNested": true
        },
        {
          "leftStructureString": "(cos(a))",
          "rightStructureString": "(^(+(1;-(^(sin(a);2)));0.5))",
          "matchJumbledAndNested": true
        },
        {
          "leftStructureString": "(+(1;-(^(cos(a);2))))",
          "rightStructureString": "(^(sin(a);2))",
          "matchJumbledAndNested": true
        },
        {
          "leftStructureString": "(^(sin(a);2))",
          "rightStructureString": "(+(1;-(^(cos(a);2))))",
          "matchJumbledAndNested": true
        },
        {
          "leftStructureString": "(sin(a))",
          "rightStructureString": "(^(+(1;-(^(cos(a);2)));0.5))",
          "matchJumbledAndNested": true
        },
        {
          "leftStructureString": "(/(1;^(cos(a);2)))",
          "rightStructureString": "(+(1;^(tg(a);2)))",
          "matchJumbledAndNested": true
        },
        {
          "leftStructureString": "(+(1;^(tg(a);2)))",
          "rightStructureString": "(/(1;^(cos(a);2)))",
          "matchJumbledAndNested": true
        },
        {
          "leftStructureString": "(/(1;^(sin(a);2)))",
          "rightStructureString": "(+(1;^(ctg(a);2)))",
          "matchJumbledAndNested": true
        },
        {
          "leftStructureString": "(+(1;^(ctg(a);2)))",
          "rightStructureString": "(/(1;^(sin(a);2)))",
          "matchJumbledAndNested": true
        },
        {
          "leftStructureString": "(/(1;+(1;^(tg(a);2))))",
          "rightStructureString": "(^(cos(a);2))",
          "matchJumbledAndNested": true
        },
        {
          "leftStructureString": "(^(cos(a);2))",
          "rightStructureString": "(/(1;+(1;^(tg(a);2))))",
          "matchJumbledAndNested": true
        },
        {
          "leftStructureString": "(/(1;+(1;^(ctg(a);2))))",
          "rightStructureString": "(^(sin(a);2))",
          "matchJumbledAndNested": true
        },
        {
          "leftStructureString": "(^(sin(a);2))",
          "rightStructureString": "(/(1;+(1;^(ctg(a);2))))",
          "matchJumbledAndNested": true
        },
        {
          "leftStructureString": "(*(tg(a);ctg(a)))",
          "rightStructureString": "(1)",
          "priority": 5,
          "matchJumbledAndNested": true
        },
        {
          "leftStructureString": "(/(sin(a);cos(a)))",
          "rightStructureString": "(tg(a))"
        },
        {
          "leftStructureString": "(tg(a))",
          "rightStructureString": "(/(sin(a);cos(a)))"
        },
        {
          "leftStructureString": "(/(cos(a);sin(a)))",
          "rightStructureString": "(ctg(a))"
        },
        {
          "leftStructureString": "(ctg(a))",
          "rightStructureString": "(/(cos(a);sin(a)))"
        },
        {
          "leftStructureString": "(/(1;ctg(a)))",
          "rightStructureString": "(tg(a))"
        },
        {
          "leftStructureString": "(tg(a))",
          "rightStructureString": "(/(1;ctg(a)))"
        },
        {
          "leftStructureString": "(/(1;tg(a)))",
          "rightStructureString": "(ctg(a))"
        },
        {
          "leftStructureString": "(ctg(a))",
          "rightStructureString": "(/(1;tg(a)))"
        },
        {
          "leftStructureString": "(sin(+(a;b)))",
          "rightStructureString": "(+(*(sin(a);cos(b));*(sin(b);cos(a))))",
          "matchJumbledAndNested": true
        },
        {
          "leftStructureString": "(+(*(sin(a);cos(b));*(sin(b);cos(a))))",
          "rightStructureString": "(sin(+(a;b)))",
          "matchJumbledAndNested": true
        },
        {
          "leftStructureString": "(sin(+(a;-(b))))",
          "rightStructureString": "(+(*(sin(a);cos(b));-(*(sin(b);cos(a)))))",
          "matchJumbledAndNested": true
        },
        {
          "leftStructureString": "(+(*(sin(a);cos(b));-(*(sin(b);cos(a)))))",
          "rightStructureString": "(sin(+(a;-(b))))",
          "matchJumbledAndNested": true
        },
        {
          "leftStructureString": "(cos(+(a;b)))",
          "rightStructureString": "(+(*(cos(a);cos(b));-(*(sin(b);sin(a)))))",
          "matchJumbledAndNested": true
        },
        {
          "leftStructureString": "(+(*(cos(a);cos(b));-(*(sin(b);sin(a)))))",
          "rightStructureString": "(cos(+(a;b)))",
          "matchJumbledAndNested": true
        },
        {
          "leftStructureString": "(cos(+(a;-(b))))",
          "rightStructureString": "(+(*(cos(a);cos(b));*(sin(b);sin(a))))",
          "matchJumbledAndNested": true
        },
        {
          "leftStructureString": "(+(*(cos(a);cos(b));*(sin(b);sin(a))))",
          "rightStructureString": "(cos(+(a;-(b))))",
          "matchJumbledAndNested": true
        },
        {
          "leftStructureString": "(sin(*(2;a)))",
          "rightStructureString": "(*(2;sin(a);cos(a)))",
          "matchJumbledAndNested": true
        },
        {
          "leftStructureString": "(*(2;sin(a);cos(a)))",
          "rightStructureString": "(sin(*(2;a)))",
          "matchJumbledAndNested": true
        },
        {
          "leftStructureString": "(cos(*(2;a)))",
          "rightStructureString": "(+(^(cos(a);2);-(^(sin(a);2))))",
          "matchJumbledAndNested": true
        },
        {
          "leftStructureString": "(+(^(cos(a);2);-(^(sin(a);2))))",
          "rightStructureString": "(cos(*(2;a)))",
          "matchJumbledAndNested": true
        },
        {
          "leftStructureString": "(+(-(^(sin(a);2));^(cos(a);2)))",
          "rightStructureString": "(cos(*(2;a)))",
          "matchJumbledAndNested": true
        },
        {
          "leftStructureString": "(cos(*(2;a)))",
          "rightStructureString": "(+(1;-(*(2;^(sin(a);2)))))",
          "matchJumbledAndNested": true
        },
        {
          "leftStructureString": "(+(1;-(*(2;^(sin(a);2)))))",
          "rightStructureString": "(cos(*(2;a)))",
          "matchJumbledAndNested": true
        },
        {
          "leftStructureString": "(+(-(*(2;^(sin(a);2)));1))",
          "rightStructureString": "(cos(*(2;a)))",
          "matchJumbledAndNested": true
        },
        {
          "leftStructureString": "(cos(*(2;a)))",
          "rightStructureString": "(+(*(2;^(cos(a);2));-(1)))",
          "matchJumbledAndNested": true
        },
        {
          "leftStructureString": "(+(*(2;^(cos(a);2));-(1)))",
          "rightStructureString": "(cos(*(2;a)))",
          "matchJumbledAndNested": true
        },
        {
          "leftStructureString": "(+(-(1);*(2;^(cos(a);2))))",
          "rightStructureString": "(cos(*(2;a)))",
          "matchJumbledAndNested": true
        },
        {
          "leftStructureString": "(+(sin(a);sin(b)))",
          "rightStructureString": "(*(2;sin(/(+(a;b);2));cos(/(+(a;-(b));2))))",
          "matchJumbledAndNested": true
        },
        {
          "leftStructureString": "(+(sin(a);-(sin(b))))",
          "rightStructureString": "(*(2;sin(/(+(a;-(b));2));cos(/(+(a;b);2))))",
          "matchJumbledAndNested": true
        },
        {
          "leftStructureString": "(+(cos(a);cos(b)))",
          "rightStructureString": "(*(2;cos(/(+(a;b);2));cos(/(+(a;-(b));2))))",
          "matchJumbledAndNested": true
        },
        {
          "leftStructureString": "(+(cos(a);-(cos(b))))",
          "rightStructureString": "(*(2;sin(/(+(a;-(b));2));sin(/(+(a;b);2))))",
          "matchJumbledAndNested": true
        },
        {
          "leftStructureString": "(*(sin(a);sin(b)))",
          "rightStructureString": "(/(+(cos(+(a;-(b)));-(cos(+(a;b))));2))",
          "matchJumbledAndNested": true
        },
        {
          "leftStructureString": "(*(sin(a);cos(b)))",
          "rightStructureString": "(/(+(sin(+(a;-(b)));sin(+(a;b)));2))",
          "matchJumbledAndNested": true
        },
        {
          "leftStructureString": "(*(cos(a);cos(b)))",
          "rightStructureString": "(/(+(cos(+(a;-(b)));cos(+(a;b)));2))",
          "matchJumbledAndNested": true
        },
        {
          "leftStructureString": "(sin(+(-(a))))",
          "rightStructureString": "(+(-(sin(a))))"
        },
        {
          "leftStructureString": "(+(-(sin(a))))",
          "rightStructureString": "(sin(+(-(a))))"
        },
        {
          "leftStructureString": "(-(sin(a)))",
          "rightStructureString": "(sin(+(-(a))))"
        },
        {
          "leftStructureString": "(cos(+(-(a))))",
          "rightStructureString": "(cos(a))"
        },
        {
          "leftStructureString": "(cos(a))",
          "rightStructureString": "(cos(+(-(a))))"
        },
        {
          "leftStructureString": "(cos(+(π;a)))",
          "rightStructureString": "(+(-(cos(-(a)))))"
        },
        {
          "leftStructureString": "(cos(+(π;-(a))))",
          "rightStructureString": "(+(-(cos(a))))"
        },
        {
          "leftStructureString": "(+(-(cos(a))))",
          "rightStructureString": "(cos(+(π;-(a))))"
        },
        {
          "leftStructureString": "(-(cos(a)))",
          "rightStructureString": "(cos(+(π;-(a))))"
        },
        {
          "leftStructureString": "(sin(+(π;a)))",
          "rightStructureString": "(sin(+(-(a))))"
        },
        {
          "leftStructureString": "(sin(+(π;-(a))))",
          "rightStructureString": "(sin(a))"
        },
        {
          "leftStructureString": "(sin(a))",
          "rightStructureString": "(sin(+(π;-(a))))"
        },
        {
          "leftStructureString": "(sin(+(/(π;2);-(a))))",
          "rightStructureString": "(cos(a))"
        },
        {
          "leftStructureString": "(sin(+(/(π;2);a)))",
          "rightStructureString": "(cos(+(-(a))))"
        },
        {
          "leftStructureString": "(cos(a))",
          "rightStructureString": "(sin(+(/(π;2);-(a))))"
        },
        {
          "leftStructureString": "(cos(+(/(π;2);-(a))))",
          "rightStructureString": "(sin(a))"
        },
        {
          "leftStructureString": "(cos(+(/(π;2);a)))",
          "rightStructureString": "(sin(+(-(a))))"
        },
        {
          "leftStructureString": "(sin(a))",
          "rightStructureString": "(cos(+(/(π;2);-(a))))"
        },
        {
          "leftStructureString": "(sin(+(-(a))))",
          "rightStructureString": "(+(-(sin(a))))"
        },
        {
          "leftStructureString": "(sin(-(a)))",
          "rightStructureString": "(+(-(sin(a))))"
        },
        {
          "leftStructureString": "(+(-(sin(a))))",
          "rightStructureString": "(sin(+(-(a))))"
        },
        {
          "leftStructureString": "(-(sin(a)))",
          "rightStructureString": "(sin(+(-(a))))"
        },
        {
          "leftStructureString": "(sin(+(b;-(a))))",
          "rightStructureString": "(+(-(sin(+(a;-(b))))))"
        },
        {
          "leftStructureString": "(+(-(sin(+(a;-(b))))))",
          "rightStructureString": "(sin(+(b;-(a))))"
        },
        {
          "leftStructureString": "(cos(+(-(a))))",
          "rightStructureString": "(cos(a))"
        },
        {
          "leftStructureString": "(cos(-(a)))",
          "rightStructureString": "(cos(a))"
        },
        {
          "leftStructureString": "(cos(a))",
          "rightStructureString": "(cos(+(-(a))))"
        },
        {
          "leftStructureString": "(cos(+(a;-(b))))",
          "rightStructureString": "(cos(+(b;-(a))))"
        },
        {
          "leftStructureString": "(sin(0))",
          "rightStructureString": "(0)",
          "priority": 5
        },
        {
          "leftStructureString": "(0)",
          "rightStructureString": "(sin(0))",
          "priority": 89
        },
        {
          "leftStructureString": "(sin(π))",
          "rightStructureString": "(0)",
          "priority": 5
        },
        {
          "leftStructureString": "(0)",
          "rightStructureString": "(sin(π))",
          "priority": 89
        },
        {
          "leftStructureString": "(sin(/(π;2)))",
          "rightStructureString": "(1)",
          "priority": 5
        },
        {
          "leftStructureString": "(1)",
          "rightStructureString": "(sin(/(π;2)))",
          "priority": 89
        },
        {
          "leftStructureString": "(cos(0))",
          "rightStructureString": "(1)",
          "priority": 5
        },
        {
          "leftStructureString": "(1)",
          "rightStructureString": "(cos(0))",
          "priority": 89
        },
        {
          "leftStructureString": "(cos(π))",
          "rightStructureString": "(+(-(1)))",
          "priority": 5
        },
        {
          "leftStructureString": "(+(-(1)))",
          "rightStructureString": "(cos(π))",
          "priority": 89
        },
        {
          "leftStructureString": "(-(1))",
          "rightStructureString": "(cos(π))",
          "priority": 89
        },
        {
          "leftStructureString": "(cos(/(π;2)))",
          "rightStructureString": "(0)",
          "priority": 5
        },
        {
          "leftStructureString": "(0)",
          "rightStructureString": "(cos(/(π;2)))",
          "priority": 89
        },
        {
          "leftStructureString": "(sin(/(π;6)))",
          "rightStructureString": "(/(1;2))",
          "priority": 5
        },
        {
          "leftStructureString": "(0.5)",
          "rightStructureString": "(sin(/(π;6)))",
          "priority": 89
        },
        {
          "leftStructureString": "(sin(/(π;4)))",
          "rightStructureString": "(/(^(2;/(1;2));2))",
          "priority": 5
        },
        {
          "leftStructureString": "(/(^(2;0.5);2))",
          "rightStructureString": "(sin(/(π;4)))",
          "priority": 13
        },
        {
          "leftStructureString": "(sin(/(π;3)))",
          "rightStructureString": "(/(^(3;/(1;2));2))",
          "priority": 5
        },
        {
          "leftStructureString": "(/(^(3;0.5);2))",
          "rightStructureString": "(sin(/(π;3)))",
          "priority": 13
        },
        {
          "leftStructureString": "(cos(/(π;3)))",
          "rightStructureString": "(/(1;2))",
          "priority": 5
        },
        {
          "leftStructureString": "(0.5)",
          "rightStructureString": "(cos(/(π;3)))",
          "priority": 89
        },
        {
          "leftStructureString": "(cos(/(π;4)))",
          "rightStructureString": "(/(^(2;/(1;2));2))",
          "priority": 5
        },
        {
          "leftStructureString": "(/(^(2;0.5);2))",
          "rightStructureString": "(cos(/(π;4)))",
          "priority": 13
        },
        {
          "leftStructureString": "(cos(/(π;6)))",
          "rightStructureString": "(/(^(3;/(1;2));2))",
          "priority": 5
        },
        {
          "leftStructureString": "(/(^(3;0.5);2))",
          "rightStructureString": "(cos(/(π;6)))",
          "priority": 13
        },
        {
          "leftStructureString": "(tg(/(π;4)))",
          "rightStructureString": "(1)",
          "priority": 5
        },
        {
          "leftStructureString": "(1)",
          "rightStructureString": "(tg(/(π;4)))",
          "priority": 89
        },
        {
          "leftStructureString": "(ctg(/(π;4)))",
          "rightStructureString": "(1)",
          "priority": 5
        },
        {
          "leftStructureString": "(1)",
          "rightStructureString": "(ctg(/(π;4)))",
          "priority": 89
        },
        {
          "leftStructureString": "(tg(0))",
          "rightStructureString": "(0)",
          "priority": 5
        },
        {
          "leftStructureString": "(0)",
          "rightStructureString": "(tg(0))",
          "priority": 89
        },
        {
          "leftStructureString": "(ctg(/(π;2)))",
          "rightStructureString": "(0)",
          "priority": 5
        },
        {
          "leftStructureString": "(0)",
          "rightStructureString": "(ctg(/(π;2)))",
          "priority": 89
        },
        {
          "leftStructureString": "(sin(a))",
          "rightStructureString": "(+(-(sin(+(a;π)))))",
          "priority": 89
        },
        {
          "leftStructureString": "(sin(a))",
          "rightStructureString": "(+(-(sin(+(a;-(π))))))",
          "priority": 89
        },
        {
          "leftStructureString": "(cos(a))",
          "rightStructureString": "(+(-(cos(+(a;π)))))",
          "priority": 89
        },
        {
          "leftStructureString": "(cos(a))",
          "rightStructureString": "(+(-(cos(+(a;-(π))))))",
          "priority": 89
        }
      ]
    },
    {
      "code": "TrigonometryZk",
      "version": 0,
      "namespaceCode": "",
      "subjectType": "standard_math",
      "rulePacks": [
        {
          "namespaceCode": "",
          "rulePackCode": "Trigonometry"
        }
      ],
      "rules": [
        {
          "leftStructureString": "(sin(+(a;*(2;π;k))))",
          "rightStructureString": "(sin(a))",
          "priority": 30
        },
        {
          "leftStructureString": "(cos(+(a;*(2;π;k))))",
          "rightStructureString": "(cos(a))",
          "priority": 30
        }
      ]
    },
    {
      "code": "TrigonometryCompleteTgCtg",
      "version": 0,
      "namespaceCode": "",
      "subjectType": "standard_math",
      "rulePacks": [
        {
          "namespaceCode": "",
          "rulePackCode": "Trigonometry"
        }
      ],
      "rules": [
        {
          "leftStructureString": "(sin(*(2;a)))",
          "rightStructureString": "(/(*(2;tg(a));+(1;^(tg(a);2))))"
        },
        {
          "leftStructureString": "(/(*(2;tg(a));+(1;^(tg(a);2))))",
          "rightStructureString": "(sin(*(2;a)))"
        },
        {
          "leftStructureString": "(cos(*(2;a)))",
          "rightStructureString": "(/(+(1;-(^(tg(a);2)));+(1;^(tg(a);2))))"
        },
        {
          "leftStructureString": "(/(+(1;-(^(tg(a);2)));+(1;^(tg(a);2))))",
          "rightStructureString": "(cos(*(2;a)))"
        },
        {
          "leftStructureString": "(tg(+(a;b)))",
          "rightStructureString": "(/(+(tg(a);tg(b));+(1;-(*(tg(a);tg(b))))))"
        },
        {
          "leftStructureString": "(/(+(tg(a);tg(b));+(1;-(*(tg(a);tg(b))))))",
          "rightStructureString": "(tg(+(a;b)))"
        },
        {
          "leftStructureString": "(tg(+(a;-(b))))",
          "rightStructureString": "(/(+(tg(a);-(tg(b)));+(1;*(tg(a);tg(b)))))"
        },
        {
          "leftStructureString": "(/(+(tg(a);-(tg(b)));+(1;*(tg(a);tg(b)))))",
          "rightStructureString": "(tg(+(a;-(b))))"
        },
        {
          "leftStructureString": "(ctg(+(a;b)))",
          "rightStructureString": "(/(+(*(ctg(a);ctg(b));-(1));+(ctg(a);ctg(b))))"
        },
        {
          "leftStructureString": "(/(+(*(ctg(a);ctg(b));-(1));+(ctg(a);ctg(b))))",
          "rightStructureString": "(ctg(+(a;b)))"
        },
        {
          "leftStructureString": "(ctg(+(a;-(b))))",
          "rightStructureString": "(/(+(*(ctg(a);ctg(b));1);+(ctg(a);-(ctg(b)))))"
        },
        {
          "leftStructureString": "(/(+(*(ctg(a);ctg(b));1);+(ctg(a);-(ctg(b)))))",
          "rightStructureString": "(ctg(+(a;-(b))))"
        }
      ]
    }
  ]
}