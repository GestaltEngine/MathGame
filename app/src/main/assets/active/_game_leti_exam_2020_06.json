{
  "taskSet": {
    "code": "leti_exam_dm_2020_06",
    "version": 0,
    "namespaceCode": "",
    "nameEn": "",
    "nameRu": "",
    "subjectType": "standard_math",
    "tasks": [
      {
        "code": "leti_exam_dm_2020_06__Hello_World_Level_Prove",
        "version": 0,
        "namespaceCode": "",
        "descriptionShortEn": "(factorial(m))",
        "descriptionShortRu": "(factorial(m))",
        "originalExpressionStructureString": "(A(m;m))",
        "goalExpressionStructureString": "(factorial(m))",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "CombinatoricBase"
          }
        ],
        "rules": [],
        "stepsNumber": 2,
        "time": 50,
        "difficulty": 1.0,
        "otherCheckSolutionData": {}
      },
      {
        "code": "leti_exam_dm_2020_06__Level_01_Prove",
        "version": 0,
        "namespaceCode": "",
        "descriptionShortEn": "(*(A(+(m;n);n);P(m)))",
        "descriptionShortRu": "(*(A(+(m;n);n);P(m)))",
        "originalExpressionStructureString": "(*(V(+(m;1);n);*(P(m);P(n))))",
        "goalExpressionStructureString": "(*(A(+(m;n);n);P(m)))",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "CombinatoricBase"
          }
        ],
        "rules": [],
        "stepsNumber": 5,
        "time": 90,
        "difficulty": 2.0,
        "otherCheckSolutionData": {}
      },
      {
        "code": "leti_exam_dm_2020_06__Level_02_Prove",
        "version": 0,
        "namespaceCode": "",
        "descriptionShortEn": "(+(S2(m;n);*(n;S2(m;+(n;1)))))",
        "descriptionShortRu": "(+(S2(m;n);*(n;S2(m;+(n;1)))))",
        "originalExpressionStructureString": "(S2(/(P(+(m;1));A(m;m));+(n;S2(m;m))))",
        "goalExpressionStructureString": "(+(S2(m;n);*(n;S2(m;+(n;1)))))",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "CombinatoricBase"
          }
        ],
        "rules": [],
        "stepsNumber": 5,
        "time": 90,
        "difficulty": 2.0,
        "otherCheckSolutionData": {}
      },
      {
        "code": "leti_exam_dm_2020_06__Level_03_Prove",
        "version": 0,
        "namespaceCode": "",
        "descriptionShortEn": "(C(*(2;n);U(n;1)))",
        "descriptionShortRu": "(C(*(2;n);U(n;1)))",
        "originalExpressionStructureString": "(*(C(n)*C(0);A(+(n;1);U(1;1))))",
        "goalExpressionStructureString": "(C(*(2;n);U(n;1)))",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "CombinatoricBase"
          }
        ],
        "rules": [
          {
            "leftStructureString": "(a)",
            "rightStructureString": "(^(a;1))"
          }
        ],
        "stepsNumber": 3,
        "time": 90,
        "difficulty": 2.0,
        "otherCheckSolutionData": {}
      },
      {
        "code": "leti_exam_dm_2020_06__Level_04_Prove_RSA",
        "version": 0,
        "namespaceCode": "",
        "descriptionShortEn": "(mod(/(1;e);*(+(p;-(1));+(q;-(1)))))",
        "descriptionShortRu": "(mod(/(1;e);*(+(p;-(1));+(q;-(1)))))",
        "originalExpressionStructureString": "(d(e;p;q))",
        "goalExpressionStructureString": "(mod(/(1;e);*(+(p;-(1));+(q;-(1)))))",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "BaseArithmetic"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "RSAWithFake"
          }
        ],
        "rules": [],
        "stepsNumber": 2,
        "time": 90,
        "difficulty": 2.0,
        "otherCheckSolutionData": {}
      },
      {
        "code": "leti_exam_dm_2020_06__Level_05_Prove_RSA",
        "version": 0,
        "namespaceCode": "",
        "descriptionShortEn": "(mod(^(c;mod(/(1;e);*(+(p;-(1));+(q;-(1)))));*(p;q)))",
        "descriptionShortRu": "(mod(^(c;mod(/(1;e);*(+(p;-(1));+(q;-(1)))));*(p;q)))",
        "originalExpressionStructureString": "(D(c;e;p;q))",
        "goalExpressionStructureString": "(mod(^(c;mod(/(1;e);*(+(p;-(1));+(q;-(1)))));*(p;q)))",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "BaseArithmetic"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "RSAWithFake"
          }
        ],
        "rules": [],
        "stepsNumber": 4,
        "time": 90,
        "difficulty": 2.0,
        "otherCheckSolutionData": {}
      },
      {
        "code": "leti_exam_dm_2020_06__Level_06_Prove_PI",
        "version": 0,
        "namespaceCode": "",
        "descriptionShortEn": "(*(—Å;ln(2)))",
        "descriptionShortRu": "(*(—Å;ln(2)))",
        "originalExpressionStructureString": "(+(ùúã(*(n;2));-(ùúã(n))))",
        "goalExpressionStructureString": "(*(—Å;ln(2)))",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "BaseArithmetic"
          }
        ],
        "rules": [
          {
            "leftStructureString": "(ùúã(a))",
            "rightStructureString": "(*(—Å;ln(a)))"
          },
          {
            "leftStructureString": "(*(A;+(B;-(C))))",
            "rightStructureString": "(+(*(A;B);-(*(A;C))))"
          },
          {
            "leftStructureString": "(*(+(B;-(A));C))",
            "rightStructureString": "(+(*(B;C);-(*(A;C))))"
          },
          {
            "leftStructureString": "(+(*(A;B);-(*(A;C))))",
            "rightStructureString": "(*(A;+(B;-(C))))"
          },
          {
            "leftStructureString": "(+(*(B;C);-(*(A;C))))",
            "rightStructureString": "(*(+(B;-(A));C))"
          },
          {
            "leftStructureString": "(+(ln(b);-(ln(c))))",
            "rightStructureString": "(ln(/(b;c)))"
          },
          {
            "leftStructureString": "(ln(/(b;c)))",
            "rightStructureString": "(+(ln(b);-(ln(c))))"
          }
        ],
        "stepsNumber": 5,
        "time": 90,
        "difficulty": 2.0,
        "otherCheckSolutionData": {}
      },
      {
        "code": "leti_exam_dm_2020_06__Level_07_Prove",
        "version": 0,
        "namespaceCode": "",
        "descriptionShortEn": "(*(+(n;C(0));C(+(m;n;1);+(n;1))))",
        "descriptionShortRu": "(*(+(n;C(0));C(+(m;n;1);+(n;1))))",
        "originalExpressionStructureString": "(*(+(m;n;C(0));C(+(m;n);n)))",
        "goalExpressionStructureString": "(*(+(n;C(0));C(+(m;n;1);+(n;1))))",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "CombinatoricBase"
          }
        ],
        "rules": [],
        "stepsNumber": 15,
        "time": 90,
        "difficulty": 3.0,
        "otherCheckSolutionData": {}
      },
      {
        "code": "leti_exam_dm_2020_06__Level_08_Prove",
        "version": 0,
        "namespaceCode": "",
        "descriptionShortEn": "(S2(n;m))",
        "descriptionShortRu": "(S2(n;m))",
        "originalExpressionStructureString": "(/(*(S1(n;m);A(+(m;n);n));*(V(+(m;1);n);factorial(m);factorial(n))))",
        "goalExpressionStructureString": "(S2(n;m))",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "CombinatoricBase"
          }
        ],
        "rules": [],
        "stepsNumber": 9,
        "time": 90,
        "difficulty": 3.0,
        "otherCheckSolutionData": {}
      },
      {
        "code": "leti_exam_dm_2020_06__Level_09_Prove",
        "version": 0,
        "namespaceCode": "",
        "descriptionShortEn": "(C(*(2;+(n;1));+(n;1)))",
        "descriptionShortRu": "(C(*(2;+(n;1));+(n;1)))",
        "originalExpressionStructureString": "(+(C(+(*(2;n);1);n);C(+(*(2;n);1);+(n;1))))",
        "goalExpressionStructureString": "(C(*(2;+(n;1));+(n;1)))",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "CombinatoricBase"
          }
        ],
        "rules": [],
        "stepsNumber": 30,
        "time": 200,
        "difficulty": 4.0,
        "otherCheckSolutionData": {}
      },
      {
        "code": "leti_exam_dm_2020_06__Level_10_Prove",
        "version": 0,
        "namespaceCode": "",
        "descriptionShortEn": "(V(+(n;1);m))",
        "descriptionShortRu": "(V(+(n;1);m))",
        "originalExpressionStructureString": "(*(/(A(+(n;m;1);m);+(m;n;1));/(+(n;1);P(m))))",
        "goalExpressionStructureString": "(V(+(n;1);m))",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "CombinatoricBase"
          }
        ],
        "rules": [],
        "stepsNumber": 26,
        "time": 200,
        "difficulty": 4.0,
        "otherCheckSolutionData": {}
      },
      {
        "code": "leti_exam_dm_2020_06__Level_11_Prove",
        "version": 0,
        "namespaceCode": "",
        "descriptionShortEn": "(*(C(+(n;k;m);m);C(+(n;k);k)))",
        "descriptionShortRu": "(*(C(+(n;k;m);m);C(+(n;k);k)))",
        "originalExpressionStructureString": "(*(C(+(n;k;m);+(k;m));C(+(k;m);m)))",
        "goalExpressionStructureString": "(*(C(+(n;k;m);m);C(+(n;k);k)))",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "CombinatoricBase"
          }
        ],
        "rules": [],
        "stepsNumber": 33,
        "time": 200,
        "difficulty": 5.0,
        "otherCheckSolutionData": {}
      },
      {
        "code": "leti_exam_dm_2020_06__Level_12_Prove",
        "version": 0,
        "namespaceCode": "",
        "descriptionShortEn": "(/(A(+(m;n;k;1);n);P(+(n;k;1))))",
        "descriptionShortRu": "(/(A(+(m;n;k;1);n);P(+(n;k;1))))",
        "originalExpressionStructureString": "(/(V(+(m;1);+(n;k;1));A(+(k;m;1);+(k;1))))",
        "goalExpressionStructureString": "(/(A(+(m;n;k;1);n);P(+(n;k;1))))",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "CombinatoricBase"
          }
        ],
        "rules": [],
        "stepsNumber": 41,
        "time": 200,
        "difficulty": 5.0,
        "otherCheckSolutionData": {}
      },
      {
        "code": "leti_exam_dm_2020_06__Level_13_Prove",
        "version": 0,
        "namespaceCode": "",
        "descriptionShortEn": "(V(+(m;1);n))",
        "descriptionShortRu": "(V(+(m;1);n))",
        "originalExpressionStructureString": "(*(/(A(+(n;1;m);m);+(m;n;1));/(C(*(2;n);n);*(C(n);P(m)))))",
        "goalExpressionStructureString": "(V(+(m;1);n))",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "CombinatoricBase"
          }
        ],
        "rules": [],
        "stepsNumber": 23,
        "time": 200,
        "difficulty": 5.0,
        "otherCheckSolutionData": {}
      }
    ]
  },
  "rulePacks": [
    {
      "code": "CombinatoricBase",
      "version": 0,
      "namespaceCode": "",
      "subjectType": "standard_math",
      "rulePacks": [
        {
          "namespaceCode": "",
          "rulePackCode": "BaseUAPCV"
        },
        {
          "namespaceCode": "",
          "rulePackCode": "BaseArithmetic"
        },
        {
          "namespaceCode": "",
          "rulePackCode": "FactorialRecurrent"
        },
        {
          "namespaceCode": "",
          "rulePackCode": "BaseStirling"
        },
        {
          "namespaceCode": "",
          "rulePackCode": "BaseCatalan"
        }
      ],
      "rules": []
    },
    {
      "code": "BaseUAPCV",
      "version": 0,
      "namespaceCode": "",
      "subjectType": "standard_math",
      "rulePacks": [],
      "rules": [
        {
          "leftStructureString": "(U(m;n))",
          "rightStructureString": "(^(m;n))"
        },
        {
          "leftStructureString": "(^(m;n))",
          "rightStructureString": "(U(m;n))"
        },
        {
          "leftStructureString": "(P(n))",
          "rightStructureString": "(factorial(n))"
        },
        {
          "leftStructureString": "(factorial(n))",
          "rightStructureString": "(P(n))"
        },
        {
          "leftStructureString": "(A(n;n))",
          "rightStructureString": "(P(n))"
        },
        {
          "leftStructureString": "(P(n))",
          "rightStructureString": "(A(n;n))"
        },
        {
          "leftStructureString": "(*(C(m;n);P(n)))",
          "rightStructureString": "(A(m;n))"
        },
        {
          "leftStructureString": "(A(m;n))",
          "rightStructureString": "(*(C(m;n);P(n)))"
        },
        {
          "leftStructureString": "(/(A(m;n);P(n)))",
          "rightStructureString": "(C(m;n))"
        },
        {
          "leftStructureString": "(C(m;n))",
          "rightStructureString": "(/(A(m;n);P(n)))"
        },
        {
          "leftStructureString": "(/(A(m;n);C(m;n)))",
          "rightStructureString": "(P(n))"
        },
        {
          "leftStructureString": "(P(n))",
          "rightStructureString": "(/(A(m;n);C(m;n)))"
        },
        {
          "leftStructureString": "(V(+(m;1);n))",
          "rightStructureString": "(/(factorial(+(m;n));*(factorial(m);factorial(n))))"
        },
        {
          "leftStructureString": "(/(factorial(+(m;n));*(factorial(m);factorial(n))))",
          "rightStructureString": "(V(+(m;1);n))"
        },
        {
          "leftStructureString": "(factorial(+(m;n)))",
          "rightStructureString": "(*(V(+(m;1);n);*(factorial(m);factorial(n))))"
        },
        {
          "leftStructureString": "(*(V(+(m;1);n);*(factorial(m);factorial(n))))",
          "rightStructureString": "(factorial(+(m;n)))"
        },
        {
          "leftStructureString": "(*(factorial(m);factorial(n)))",
          "rightStructureString": "(/(factorial(+(m;n));V(+(m;1);n)))"
        },
        {
          "leftStructureString": "(/(factorial(+(m;n));V(+(m;1);n)))",
          "rightStructureString": "(*(factorial(m);factorial(n)))"
        },
        {
          "leftStructureString": "(C(+(m;n);n))",
          "rightStructureString": "(/(factorial(+(m;n));*(factorial(m);factorial(n))))"
        },
        {
          "leftStructureString": "(C(+(m;n);n))",
          "rightStructureString": "(V(+(m;1);n))"
        },
        {
          "leftStructureString": "(V(+(m;1);n))",
          "rightStructureString": "(C(+(m;n);n))"
        },
        {
          "leftStructureString": "(A(+(m;n);n))",
          "rightStructureString": "(/(factorial(+(m;n));factorial(m)))"
        },
        {
          "leftStructureString": "(/(factorial(+(m;n));factorial(m)))",
          "rightStructureString": "(A(+(m;n);n))"
        },
        {
          "leftStructureString": "(factorial(+(m;n)))",
          "rightStructureString": "(*(A(+(m;n);n);factorial(m)))"
        },
        {
          "leftStructureString": "(*(A(+(m;n);n);factorial(m)))",
          "rightStructureString": "(factorial(+(m;n)))"
        },
        {
          "leftStructureString": "(*(factorial(m);A(+(m;n);n)))",
          "rightStructureString": "(factorial(+(m;n)))"
        },
        {
          "leftStructureString": "(factorial(m))",
          "rightStructureString": "(/(factorial(+(m;n));A(+(m;n);n)))"
        },
        {
          "leftStructureString": "(/(factorial(+(m;n));A(+(m;n);n)))",
          "rightStructureString": "(factorial(m))"
        }
      ]
    },
    {
      "code": "BaseArithmetic",
      "version": 0,
      "namespaceCode": "",
      "subjectType": "standard_math",
      "rulePacks": [
        {
          "namespaceCode": "",
          "rulePackCode": "Arithmetic–°ommutativity"
        },
        {
          "namespaceCode": "",
          "rulePackCode": "ArithmeticAssociativity"
        }
      ],
      "rules": [
        {
          "leftStructureString": "(a)",
          "rightStructureString": "((a))"
        },
        {
          "leftStructureString": "((a))",
          "rightStructureString": "(a)"
        },
        {
          "leftStructureString": "(+(a;b))",
          "rightStructureString": "(+(b;a))"
        },
        {
          "leftStructureString": "(*(a;b))",
          "rightStructureString": "(*(b;a))"
        },
        {
          "leftStructureString": "(+(a;a))",
          "rightStructureString": "(*(2;a))"
        },
        {
          "leftStructureString": "(*(2;a))",
          "rightStructureString": "(+(a;a))"
        },
        {
          "leftStructureString": "(+(a;0))",
          "rightStructureString": "(a)"
        },
        {
          "leftStructureString": "(+(0;a))",
          "rightStructureString": "(a)"
        },
        {
          "leftStructureString": "(a)",
          "rightStructureString": "(+(a;0))"
        },
        {
          "leftStructureString": "(*(a;0))",
          "rightStructureString": "(0)"
        },
        {
          "leftStructureString": "(*(0;a))",
          "rightStructureString": "(0)"
        },
        {
          "leftStructureString": "(/(0;a))",
          "rightStructureString": "(0)"
        },
        {
          "leftStructureString": "(*(a;1))",
          "rightStructureString": "(a)"
        },
        {
          "leftStructureString": "(*(1;a))",
          "rightStructureString": "(a)"
        },
        {
          "leftStructureString": "(/(a;1))",
          "rightStructureString": "(a)"
        },
        {
          "leftStructureString": "(^(a;1))",
          "rightStructureString": "(a)"
        },
        {
          "leftStructureString": "(/(a;a))",
          "rightStructureString": "(1)"
        },
        {
          "leftStructureString": "(a)",
          "rightStructureString": "(*(a;1))"
        },
        {
          "leftStructureString": "(a)",
          "rightStructureString": "(/(1;/(1;a)))"
        },
        {
          "leftStructureString": "(/(1;/(1;a)))",
          "rightStructureString": "(a)"
        },
        {
          "leftStructureString": "(+(1;1))",
          "rightStructureString": "(2)"
        },
        {
          "leftStructureString": "(2)",
          "rightStructureString": "(+(1;1))"
        },
        {
          "leftStructureString": "(+(1;2))",
          "rightStructureString": "(3)"
        },
        {
          "leftStructureString": "(3)",
          "rightStructureString": "(+(1;2))"
        },
        {
          "leftStructureString": "(*(1;1))",
          "rightStructureString": "(1)"
        },
        {
          "leftStructureString": "(1)",
          "rightStructureString": "(*(1;1))"
        }
      ]
    },
    {
      "code": "Arithmetic–°ommutativity",
      "version": 0,
      "namespaceCode": "",
      "subjectType": "standard_math",
      "rulePacks": [],
      "rules": [
        {
          "leftStructureString": "(+(A;+(B;C)))",
          "rightStructureString": "(+(A;B;C))"
        },
        {
          "leftStructureString": "(+(A;B;C))",
          "rightStructureString": "(+(A;+(B;C)))"
        },
        {
          "leftStructureString": "(+(A;+(B;C)))",
          "rightStructureString": "(+(+(A;B);C))"
        },
        {
          "leftStructureString": "(+(+(A;B);C))",
          "rightStructureString": "(+(A;+(B;C)))"
        },
        {
          "leftStructureString": "(+(+(A;B);C))",
          "rightStructureString": "(+(A;B;C))"
        },
        {
          "leftStructureString": "(+(A;B;C))",
          "rightStructureString": "(+(+(A;B);C))"
        },
        {
          "leftStructureString": "(+(+(A;B);+(C;D)))",
          "rightStructureString": "(+(A;B;C;D))"
        },
        {
          "leftStructureString": "(+(A;+(B;C;D)))",
          "rightStructureString": "(+(A;B;C;D))"
        },
        {
          "leftStructureString": "(+(+(A;B;C);D))",
          "rightStructureString": "(+(A;B;C;D))"
        },
        {
          "leftStructureString": "(+(A;B;+(C;D)))",
          "rightStructureString": "(+(A;B;C;D))"
        },
        {
          "leftStructureString": "(+(A;B;C;D))",
          "rightStructureString": "(+(A;B;+(C;D)))"
        },
        {
          "leftStructureString": "(+(A;+(B;C);D))",
          "rightStructureString": "(+(A;B;C;D))"
        },
        {
          "leftStructureString": "(+(A;B;C;D))",
          "rightStructureString": "(+(A;+(B;C);D))"
        },
        {
          "leftStructureString": "(+(+(A;B);C;D))",
          "rightStructureString": "(+(A;B;C;D))"
        },
        {
          "leftStructureString": "(+(A;B;C;D))",
          "rightStructureString": "(+(+(A;B);C;D))"
        },
        {
          "leftStructureString": "(*(A;*(B;C)))",
          "rightStructureString": "(*(A;B;C))"
        },
        {
          "leftStructureString": "(*(A;B;C))",
          "rightStructureString": "(*(A;*(B;C)))"
        },
        {
          "leftStructureString": "(*(A;*(B;C)))",
          "rightStructureString": "(*(*(A;B);C))"
        },
        {
          "leftStructureString": "(*(*(A;B);C))",
          "rightStructureString": "(*(A;*(B;C)))"
        },
        {
          "leftStructureString": "(*(*(A;B);C))",
          "rightStructureString": "(*(A;B;C))"
        },
        {
          "leftStructureString": "(*(A;B;C))",
          "rightStructureString": "(*(*(A;B);C))"
        },
        {
          "leftStructureString": "(*(*(A;B);*(C;D)))",
          "rightStructureString": "(*(A;B;C;D))"
        },
        {
          "leftStructureString": "(*(A;*(B;C;D)))",
          "rightStructureString": "(*(A;B;C;D))"
        },
        {
          "leftStructureString": "(*(*(A;B;C);D))",
          "rightStructureString": "(*(A;B;C;D))"
        },
        {
          "leftStructureString": "(*(A;B;*(C;D)))",
          "rightStructureString": "(*(A;B;C;D))"
        },
        {
          "leftStructureString": "(*(A;B;C;D))",
          "rightStructureString": "(*(A;B;*(C;D)))"
        },
        {
          "leftStructureString": "(*(A;*(B;C);D))",
          "rightStructureString": "(*(A;B;C;D))"
        },
        {
          "leftStructureString": "(*(A;B;C;D))",
          "rightStructureString": "(*(A;*(B;C);D))"
        },
        {
          "leftStructureString": "(*(*(A;B);C;D))",
          "rightStructureString": "(*(A;B;C;D))"
        },
        {
          "leftStructureString": "(*(A;B;C;D))",
          "rightStructureString": "(*(*(A;B);C;D))"
        }
      ]
    },
    {
      "code": "ArithmeticAssociativity",
      "version": 0,
      "namespaceCode": "",
      "subjectType": "standard_math",
      "rulePacks": [],
      "rules": [
        {
          "leftStructureString": "(*(A;+(B;C)))",
          "rightStructureString": "(+(*(A;B);*(A;C)))"
        },
        {
          "leftStructureString": "(*(+(B;C);A))",
          "rightStructureString": "(+(*(B;A);*(C;A)))"
        },
        {
          "leftStructureString": "(+(*(A;B);*(A;C)))",
          "rightStructureString": "(*(A;+(B;C)))"
        },
        {
          "leftStructureString": "(+(*(B;C);*(A;C)))",
          "rightStructureString": "(*(+(B;A);C))"
        },
        {
          "leftStructureString": "(+(/(B;C);/(A;C)))",
          "rightStructureString": "(/(+(B;A);C))"
        },
        {
          "leftStructureString": "(/(+(B;A);C))",
          "rightStructureString": "(+(/(B;C);/(A;C)))"
        },
        {
          "leftStructureString": "(+(/(B;C);/(A;D)))",
          "rightStructureString": "(/(+(*(B;D);*(C;A));*(C;D)))"
        },
        {
          "leftStructureString": "(*(A;/(B;C)))",
          "rightStructureString": "(/(*(A;B);C))"
        },
        {
          "leftStructureString": "(*(/(B;C);A))",
          "rightStructureString": "(/(*(A;B);C))"
        },
        {
          "leftStructureString": "(/(A;B))",
          "rightStructureString": "(/(1;/(B;A)))"
        },
        {
          "leftStructureString": "(/(*(A;B);C))",
          "rightStructureString": "(*(A;/(B;C)))"
        },
        {
          "leftStructureString": "(/(/(B;C);A))",
          "rightStructureString": "(/(B;*(A;C)))"
        },
        {
          "leftStructureString": "(/(B;*(A;C)))",
          "rightStructureString": "(/(/(B;C);A))"
        },
        {
          "leftStructureString": "(/(A;/(B;C)))",
          "rightStructureString": "(/(*(A;C);B))"
        },
        {
          "leftStructureString": "(/(*(A;C);B))",
          "rightStructureString": "(/(A;/(B;C)))"
        },
        {
          "leftStructureString": "(/(A;*(B;C)))",
          "rightStructureString": "(*(/(A;B);/(1;C)))"
        },
        {
          "leftStructureString": "(/(A;*(B;C)))",
          "rightStructureString": "(*(/(1;B);/(A;C)))"
        },
        {
          "leftStructureString": "(*(/(A;B);/(1;C)))",
          "rightStructureString": "(/(A;*(B;C)))"
        },
        {
          "leftStructureString": "(*(/(1;B);/(A;C)))",
          "rightStructureString": "(/(A;*(B;C)))"
        },
        {
          "leftStructureString": "(*(/(D;B);/(A;C)))",
          "rightStructureString": "(/(*(D;A);*(B;C)))"
        },
        {
          "leftStructureString": "(/(*(D;A);*(B;C)))",
          "rightStructureString": "(*(/(D;B);/(A;C)))"
        },
        {
          "leftStructureString": "(/(*(D;A);*(D;C)))",
          "rightStructureString": "(/(A;C))"
        },
        {
          "leftStructureString": "(/(*(D;A);D))",
          "rightStructureString": "(A)"
        },
        {
          "leftStructureString": "(/(*(A;D);D))",
          "rightStructureString": "(A)"
        }
      ]
    },
    {
      "code": "FactorialRecurrent",
      "version": 0,
      "namespaceCode": "",
      "subjectType": "standard_math",
      "rulePacks": [],
      "rules": [
        {
          "leftStructureString": "(factorial(+(n;1)))",
          "rightStructureString": "(*(factorial(n);+(n;1)))"
        },
        {
          "leftStructureString": "(*(factorial(n);+(n;1)))",
          "rightStructureString": "(factorial(+(n;1)))"
        },
        {
          "leftStructureString": "(*(+(n;1);factorial(n)))",
          "rightStructureString": "(factorial(+(n;1)))"
        },
        {
          "leftStructureString": "(/(factorial(+(n;1));+(n;1)))",
          "rightStructureString": "(factorial(n))"
        },
        {
          "leftStructureString": "(factorial(n))",
          "rightStructureString": "(/(factorial(+(n;1));+(n;1)))"
        },
        {
          "leftStructureString": "(/(factorial(+(n;1));factorial(n)))",
          "rightStructureString": "(+(n;1))"
        },
        {
          "leftStructureString": "(+(n;1))",
          "rightStructureString": "(/(factorial(+(n;1));factorial(n)))"
        }
      ]
    },
    {
      "code": "BaseStirling",
      "version": 0,
      "namespaceCode": "",
      "subjectType": "standard_math",
      "rulePacks": [],
      "rules": [
        {
          "leftStructureString": "(S1(m;n))",
          "rightStructureString": "(*(factorial(n);S2(m;n)))"
        },
        {
          "leftStructureString": "(*(factorial(n);S2(m;n)))",
          "rightStructureString": "(S1(m;n))"
        },
        {
          "leftStructureString": "(*(S2(m;n);factorial(n)))",
          "rightStructureString": "(S1(m;n))"
        },
        {
          "leftStructureString": "(factorial(n))",
          "rightStructureString": "(/(S1(m;n);S2(m;n)))"
        },
        {
          "leftStructureString": "(/(S1(m;n);S2(m;n)))",
          "rightStructureString": "(factorial(n))"
        },
        {
          "leftStructureString": "(S2(m;n))",
          "rightStructureString": "(/(S1(m;n);factorial(n)))"
        },
        {
          "leftStructureString": "(/(S1(m;n);factorial(n)))",
          "rightStructureString": "(S2(m;n))"
        },
        {
          "leftStructureString": "(S2(+(m;1);+(n;1)))",
          "rightStructureString": "(+(S2(m;n);*(n;S2(m;+(n;1)))))"
        },
        {
          "leftStructureString": "(+(S2(m;n);*(n;S2(m;+(n;1)))))",
          "rightStructureString": "(S2(+(m;1);+(n;1)))"
        },
        {
          "leftStructureString": "(S2(m;m))",
          "rightStructureString": "(1)"
        },
        {
          "leftStructureString": "(1)",
          "rightStructureString": "(S2(m;n))"
        }
      ]
    },
    {
      "code": "BaseCatalan",
      "version": 0,
      "namespaceCode": "",
      "subjectType": "standard_math",
      "rulePacks": [],
      "rules": [
        {
          "leftStructureString": "(C(*(2;n);n))",
          "rightStructureString": "(*(C(n);+(n;1)))"
        },
        {
          "leftStructureString": "(*(C(n);+(n;1)))",
          "rightStructureString": "(C(*(2;n);n))"
        },
        {
          "leftStructureString": "(*(+(n;1);C(n)))",
          "rightStructureString": "(C(*(2;n);n))"
        },
        {
          "leftStructureString": "(C(n))",
          "rightStructureString": "(/(C(*(2;n);n);+(n;1)))"
        },
        {
          "leftStructureString": "(/(C(*(2;n);n);+(n;1)))",
          "rightStructureString": "(C(n))"
        },
        {
          "leftStructureString": "(+(n;1))",
          "rightStructureString": "(/(C(*(2;n);n);C(n)))"
        },
        {
          "leftStructureString": "(/(C(*(2;n);n);C(n)))",
          "rightStructureString": "(+(n;1))"
        },
        {
          "leftStructureString": "(C(0))",
          "rightStructureString": "(1)"
        },
        {
          "leftStructureString": "(1)",
          "rightStructureString": "(C(0))"
        }
      ]
    },
    {
      "code": "RSAWithFake",
      "version": 0,
      "namespaceCode": "",
      "subjectType": "standard_math",
      "rulePacks": [],
      "rules": [
        {
          "leftStructureString": "(d(e;p;q))",
          "rightStructureString": "(mod(/(1;e);œÜ(p;q)))"
        },
        {
          "leftStructureString": "(d(e;p;q))",
          "rightStructureString": "(mod(/(1;e);œÜ(+(p;-(1));q)))"
        },
        {
          "leftStructureString": "(d(e;p;q))",
          "rightStructureString": "(mod(/(1;e);œÜ(+(p;-(1));+(q;-(1)))))"
        },
        {
          "leftStructureString": "(d(e;p;q))",
          "rightStructureString": "(mod(/(1;e);œÜ(p;+(q;-(1)))))"
        },
        {
          "leftStructureString": "(d(e;p;q))",
          "rightStructureString": "(œÜ(+(p;-(1));+(q;-(1))))"
        },
        {
          "leftStructureString": "(d(e;p;q))",
          "rightStructureString": "(œÜ(+(p;-(1));q))"
        },
        {
          "leftStructureString": "(d(e;p;q))",
          "rightStructureString": "(œÜ(p;+(q;-(1))))"
        },
        {
          "leftStructureString": "(d(e;p;q))",
          "rightStructureString": "(œÜ(p;q))"
        },
        {
          "leftStructureString": "(mod(/(1;e);œÜ(p;q)))",
          "rightStructureString": "(d(e;p;q))"
        },
        {
          "leftStructureString": "(mod(/(1;e);œÜ(+(p;-(1));q)))",
          "rightStructureString": "(d(e;p;q))"
        },
        {
          "leftStructureString": "(mod(/(1;e);œÜ(+(p;-(1));+(q;-(1)))))",
          "rightStructureString": "(d(e;p;q))"
        },
        {
          "leftStructureString": "(mod(/(1;e);œÜ(p;+(q;-(1)))))",
          "rightStructureString": "(d(e;p;q))"
        },
        {
          "leftStructureString": "(œÜ(+(p;-(1));+(q;-(1))))",
          "rightStructureString": "(d(e;p;q))"
        },
        {
          "leftStructureString": "(œÜ(+(p;-(1));q))",
          "rightStructureString": "(d(e;p;q))"
        },
        {
          "leftStructureString": "(œÜ(p;+(q;-(1))))",
          "rightStructureString": "(d(e;p;q))"
        },
        {
          "leftStructureString": "(œÜ(p;q))",
          "rightStructureString": "(d(e;p;q))"
        },
        {
          "leftStructureString": "(œÜ(p;q))",
          "rightStructureString": "(*(+(p;-(1));+(q;-(1))))"
        },
        {
          "leftStructureString": "(œÜ(p;q))",
          "rightStructureString": "(*(p;q))"
        },
        {
          "leftStructureString": "(œÜ(p;q))",
          "rightStructureString": "(*(+(p;-(1));q))"
        },
        {
          "leftStructureString": "(œÜ(p;q))",
          "rightStructureString": "(*(+(p;-(q));q))"
        },
        {
          "leftStructureString": "(œÜ(p;q))",
          "rightStructureString": "(*(+(p;1);q))"
        },
        {
          "leftStructureString": "(œÜ(p;q))",
          "rightStructureString": "(*(+(p;q);q))"
        },
        {
          "leftStructureString": "(*(+(p;-(1));+(q;-(1))))",
          "rightStructureString": "(œÜ(p;q))"
        },
        {
          "leftStructureString": "(*(p;q))",
          "rightStructureString": "(œÜ(p;q))"
        },
        {
          "leftStructureString": "(*(+(p;-(1));q))",
          "rightStructureString": "(œÜ(p;q))"
        },
        {
          "leftStructureString": "(*(+(p;-(q));q))",
          "rightStructureString": "(œÜ(p;q))"
        },
        {
          "leftStructureString": "(*(+(p;1);q))",
          "rightStructureString": "(œÜ(p;q))"
        },
        {
          "leftStructureString": "(*(+(p;q);q))",
          "rightStructureString": "(œÜ(p;q))"
        },
        {
          "leftStructureString": "(D(c;e;p;q))",
          "rightStructureString": "(mod(^(c;d(e;p;q));n(p;q)))"
        },
        {
          "leftStructureString": "(D(c;e;p;q))",
          "rightStructureString": "(mod(^(d(e;p;q);c);n(p;q)))"
        },
        {
          "leftStructureString": "(D(c;e;p;q))",
          "rightStructureString": "(mod(^(d(e;p;q);*(p;q));c))"
        },
        {
          "leftStructureString": "(D(c;e;p;q))",
          "rightStructureString": "(mod(^(*(p;q);d(e;p;q));c))"
        },
        {
          "leftStructureString": "(mod(^(c;d(e;p;q));n(p;q)))",
          "rightStructureString": "(D(c;e;p;q))"
        },
        {
          "leftStructureString": "(mod(^(d(e;p;q);c);n(p;q)))",
          "rightStructureString": "(D(c;e;p;q))"
        },
        {
          "leftStructureString": "(mod(^(d(e;p;q);*(p;q));c))",
          "rightStructureString": "(D(c;e;p;q))"
        },
        {
          "leftStructureString": "(mod(^(*(p;q);d(e;p;q));c))",
          "rightStructureString": "(D(c;e;p;q))"
        },
        {
          "leftStructureString": "(n(p;q))",
          "rightStructureString": "(+(p;q))"
        },
        {
          "leftStructureString": "(n(p;q))",
          "rightStructureString": "(*(p;q))"
        },
        {
          "leftStructureString": "(n(p;q))",
          "rightStructureString": "(^(p;q))"
        },
        {
          "leftStructureString": "(+(p;q))",
          "rightStructureString": "(n(p;q))"
        },
        {
          "leftStructureString": "(*(p;q))",
          "rightStructureString": "(n(p;q))"
        },
        {
          "leftStructureString": "(^(p;q))",
          "rightStructureString": "(n(p;q))"
        }
      ]
    }
  ]
}