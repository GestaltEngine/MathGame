{
  "taskSet": {
    "code": "logical_calculus_combo",
    "version": 0,
    "namespaceCode": "",
    "nameEn": "Logical Calculus Combo",
    "nameRu": "Логические исчисления",
    "subjectType": "standard_math",
    "tasks": [
      {
        "code": "logical_calculus_combo__Level_01_Prove",
        "version": 0,
        "namespaceCode": "",
        "nameEn": "Level 1 Prove",
        "nameRu": "Уровень 1 Доказательство",
        "descriptionShortEn": "(or(A;not(or(B;C))))",
        "descriptionShortRu": "(or(A;not(or(B;C))))",
        "originalExpressionStructureString": "(and(or(A;not(B));or(A;not(C))))",
        "goalExpressionStructureString": "(or(A;not(or(B;C))))",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "SetBase"
          }
        ],
        "rules": [],
        "stepsNumber": 2,
        "time": 50,
        "difficulty": 1.0,
        "otherCheckSolutionData": {}
      },
      {
        "code": "logical_calculus_combo__Level_02_CNF",
        "version": 0,
        "namespaceCode": "",
        "nameEn": "Level 2 CNF",
        "nameRu": "Уровень 2 CNF",
        "descriptionShortEn": "CNF",
        "descriptionShortRu": "CNF",
        "originalExpressionStructureString": "(set-(A;set-(A;B)))",
        "goalExpressionStructureString": "",
        "goalPattern": "and : (or) : : : not",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "SetBase"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "SetAbsorptionLawReduction"
          }
        ],
        "rules": [],
        "stepsNumber": 3,
        "time": 50,
        "difficulty": 2.0,
        "otherCheckSolutionData": {}
      },
      {
        "code": "logical_calculus_combo__Level_03_Prove",
        "version": 0,
        "namespaceCode": "",
        "nameEn": "Level 3 Prove",
        "nameRu": "Уровень 3 Доказательство",
        "descriptionShortEn": "(A)",
        "descriptionShortRu": "(A)",
        "originalExpressionStructureString": "(or(A;and(A;B)))",
        "goalExpressionStructureString": "(A)",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "SetBase"
          }
        ],
        "rules": [],
        "stepsNumber": 4,
        "time": 90,
        "difficulty": 2.0,
        "otherCheckSolutionData": {}
      },
      {
        "code": "logical_calculus_combo__Level_04_Prove",
        "version": 0,
        "namespaceCode": "",
        "nameEn": "Level 4 Prove",
        "nameRu": "Уровень 4 Доказательство",
        "descriptionShortEn": "(implic(or(A;B);C))",
        "descriptionShortRu": "(implic(or(A;B);C))",
        "originalExpressionStructureString": "(or(set-(not(A);B);C))",
        "goalExpressionStructureString": "(implic(or(A;B);C))",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "SetBase"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "SetAbsorptionLawReduction"
          }
        ],
        "rules": [],
        "stepsNumber": 4,
        "time": 60,
        "difficulty": 2.0,
        "otherCheckSolutionData": {}
      },
      {
        "code": "logical_calculus_combo__Level_05_DNF",
        "version": 0,
        "namespaceCode": "",
        "nameEn": "Level 5 DNF",
        "nameRu": "Уровень 5 DNF",
        "descriptionShortEn": "DNF",
        "descriptionShortRu": "DNF",
        "originalExpressionStructureString": "(implic(implic(A;not(B));C))",
        "goalExpressionStructureString": "",
        "goalPattern": "or : (and) : : : not",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "SetBase"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "SetAbsorptionLawReduction"
          }
        ],
        "rules": [],
        "stepsNumber": 4,
        "time": 60,
        "difficulty": 2.0,
        "otherCheckSolutionData": {}
      },
      {
        "code": "logical_calculus_combo__Level_06_3-CNF",
        "version": 0,
        "namespaceCode": "",
        "nameEn": "Level 6 3-CNF",
        "nameRu": "Уровень 6 3-CNF",
        "descriptionShortEn": "3-CNF",
        "descriptionShortRu": "3-CNF",
        "originalExpressionStructureString": "(not(and(A;set-(B;C))))",
        "goalExpressionStructureString": "",
        "goalPattern": "and : (or : 3) : : : not",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "SetBase"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "SetAbsorptionLawReduction"
          }
        ],
        "rules": [],
        "stepsNumber": 4,
        "time": 90,
        "difficulty": 2.0,
        "otherCheckSolutionData": {}
      },
      {
        "code": "logical_calculus_combo__Level_07_2-CNF",
        "version": 0,
        "namespaceCode": "",
        "nameEn": "Level 7 2-CNF",
        "nameRu": "Уровень 7 2-CNF",
        "descriptionShortEn": "2-CNF",
        "descriptionShortRu": "2-CNF",
        "originalExpressionStructureString": "(not(or(and(not(A);not(B));and(not(C);not(D)))))",
        "goalExpressionStructureString": "",
        "goalPattern": "and : (or : 2) : : : not",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "SetBase"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "SetAbsorptionLawReduction"
          }
        ],
        "rules": [],
        "stepsNumber": 7,
        "time": 70,
        "difficulty": 2.0,
        "otherCheckSolutionData": {}
      },
      {
        "code": "logical_calculus_combo__Level_08_Prove",
        "version": 0,
        "namespaceCode": "",
        "nameEn": "Level 8 Prove",
        "nameRu": "Уровень 8 Доказательство",
        "descriptionShortEn": "(implic(A;implic(B;implic(C;B))))",
        "descriptionShortRu": "(implic(A;implic(B;implic(C;B))))",
        "originalExpressionStructureString": "(implic(and(A;B);or(not(C);B)))",
        "goalExpressionStructureString": "(implic(A;implic(B;implic(C;B))))",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "SetBase"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "SetAbsorptionLawReduction"
          }
        ],
        "rules": [],
        "stepsNumber": 7,
        "time": 90,
        "difficulty": 3.0,
        "otherCheckSolutionData": {}
      },
      {
        "code": "logical_calculus_combo__Level_09_Resolution",
        "version": 0,
        "namespaceCode": "",
        "nameEn": "Level 9 Resolution",
        "nameRu": "Уровень 9 Резолюция",
        "descriptionShortEn": "(0)",
        "descriptionShortRu": "(0)",
        "originalExpressionStructureString": "(and(A;B;implic(A;C);not(C)))",
        "goalExpressionStructureString": "(0)",
        "goalPattern": "",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "SetResolution"
          }
        ],
        "rules": [],
        "stepsNumber": 6,
        "time": 120,
        "difficulty": 3.0,
        "otherCheckSolutionData": {}
      },
      {
        "code": "logical_calculus_combo__Level_10_DNF",
        "version": 0,
        "namespaceCode": "",
        "nameEn": "Level 10 DNF",
        "nameRu": "Уровень 10 DNF",
        "descriptionShortEn": "3-DNF",
        "descriptionShortRu": "3-DNF",
        "originalExpressionStructureString": "(not(or(A;B;C)))",
        "goalExpressionStructureString": "",
        "goalPattern": "or : (and : 3) : : : not",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "SetBase"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "SetAbsorptionLaw"
          }
        ],
        "rules": [],
        "stepsNumber": 5,
        "time": 90,
        "difficulty": 3.0,
        "otherCheckSolutionData": {}
      },
      {
        "code": "logical_calculus_combo__Level_11_Prove",
        "version": 0,
        "namespaceCode": "",
        "nameEn": "Level 11 Prove",
        "nameRu": "Уровень 11 Доказательство",
        "descriptionShortEn": "(not(B))",
        "descriptionShortRu": "(not(B))",
        "originalExpressionStructureString": "(set-(not(and(A;B));B))",
        "goalExpressionStructureString": "(not(B))",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "SetBase"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "SetAbsorptionLawReduction"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "SetMultiArgumentAnd"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "SetMultiArgumentOr"
          }
        ],
        "rules": [],
        "stepsNumber": 6,
        "time": 90,
        "difficulty": 3.0,
        "otherCheckSolutionData": {}
      },
      {
        "code": "logical_calculus_combo__Level_12_Prove",
        "version": 0,
        "namespaceCode": "",
        "nameEn": "Level 12 Prove",
        "nameRu": "Уровень 12 Доказательство",
        "descriptionShortEn": "(implic(implic(A;or(B;C));implic(B;C)))",
        "descriptionShortRu": "(implic(implic(A;or(B;C));implic(B;C)))",
        "originalExpressionStructureString": "(or(set-(set-(A;B);C);or(not(B);C)))",
        "goalExpressionStructureString": "(implic(implic(A;or(B;C));implic(B;C)))",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "SetBase"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "SetAbsorptionLawReduction"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "SetMultiArgumentAnd"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "SetMultiArgumentOr"
          }
        ],
        "rules": [],
        "stepsNumber": 8,
        "time": 150,
        "difficulty": 4.0,
        "otherCheckSolutionData": {}
      },
      {
        "code": "logical_calculus_combo__Level_13_DNF",
        "version": 0,
        "namespaceCode": "",
        "nameEn": "Level 13 DNF",
        "nameRu": "Уровень 13 DNF",
        "descriptionShortEn": "DNF",
        "descriptionShortRu": "DNF",
        "originalExpressionStructureString": "(implic(and(implic(C;B);not(or(A;B;C)));C))",
        "goalExpressionStructureString": "",
        "goalPattern": "or : (and) : : : not",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "SetBase"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "SetAbsorptionLawReduction"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "SetMultiArgumentAnd"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "SetMultiArgumentOr"
          }
        ],
        "rules": [],
        "stepsNumber": 10,
        "time": 200,
        "difficulty": 4.0,
        "otherCheckSolutionData": {}
      },
      {
        "code": "logical_calculus_combo__Level_14_DNF",
        "version": 0,
        "namespaceCode": "",
        "nameEn": "Level 14 DNF",
        "nameRu": "Уровень 14 DNF",
        "descriptionShortEn": "DNF",
        "descriptionShortRu": "DNF",
        "originalExpressionStructureString": "(and(not(or(and(A;B;or(and(B;C);not(A)));A));and(B;A)))",
        "goalExpressionStructureString": "",
        "goalPattern": "or : (and) : : : not",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "SetBase"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "SetAbsorptionLawReduction"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "SetMultiArgumentAnd"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "SetMultiArgumentOr"
          }
        ],
        "rules": [],
        "stepsNumber": 9,
        "time": 200,
        "difficulty": 4.0,
        "otherCheckSolutionData": {}
      },
      {
        "code": "logical_calculus_combo__Level_15_Prove",
        "version": 0,
        "namespaceCode": "",
        "nameEn": "Level 15 Prove",
        "nameRu": "Уровень 15 Доказательство",
        "descriptionShortEn": "(and(not(set-(A;B));not(set-(B;A))))",
        "descriptionShortRu": "(and(not(set-(A;B));not(set-(B;A))))",
        "originalExpressionStructureString": "(implic(or(A;B);and(A;B)))",
        "goalExpressionStructureString": "(and(not(set-(A;B));not(set-(B;A))))",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "SetBase"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "SetAbsorptionLawReduction"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "SetMultiArgumentAnd"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "SetMultiArgumentOr"
          }
        ],
        "rules": [],
        "stepsNumber": 13,
        "time": 200,
        "difficulty": 3.0,
        "otherCheckSolutionData": {}
      },
      {
        "code": "logical_calculus_combo__Level_16_Prove",
        "version": 0,
        "namespaceCode": "",
        "nameEn": "Level 16 Prove",
        "nameRu": "Уровень 16 Доказательство",
        "descriptionShortEn": "(or(set-(A;B);set-(B;A)))",
        "descriptionShortRu": "(or(set-(A;B);set-(B;A)))",
        "originalExpressionStructureString": "(set-(or(A;B);and(implic(A;B);implic(B;A))))",
        "goalExpressionStructureString": "(or(set-(A;B);set-(B;A)))",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "SetBase"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "SetAbsorptionLawReduction"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "SetMultiArgumentAnd"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "SetMultiArgumentOr"
          }
        ],
        "rules": [],
        "stepsNumber": 22,
        "time": 300,
        "difficulty": 4.0,
        "otherCheckSolutionData": {}
      },
      {
        "code": "logical_calculus_combo__Level_17_Prove",
        "version": 0,
        "namespaceCode": "",
        "nameEn": "Level 17 Prove",
        "nameRu": "Уровень 17 Доказательство",
        "descriptionShortEn": "(or(set-(D;B);set-(A;or(C;D))))",
        "descriptionShortRu": "(or(set-(D;B);set-(A;or(C;D))))",
        "originalExpressionStructureString": "(implic(implic(set-(A;C);D);set-(D;B)))",
        "goalExpressionStructureString": "(or(set-(D;B);set-(A;or(C;D))))",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "SetBase"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "SetAbsorptionLawReduction"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "SetMultiArgumentAnd"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "SetMultiArgumentOr"
          }
        ],
        "rules": [],
        "stepsNumber": 10,
        "time": 200,
        "difficulty": 4.0,
        "otherCheckSolutionData": {}
      },
      {
        "code": "logical_calculus_combo__Level_18_DNF",
        "version": 0,
        "namespaceCode": "",
        "nameEn": "Level 18 DNF",
        "nameRu": "Уровень 18 DNF",
        "descriptionShortEn": "DNF",
        "descriptionShortRu": "DNF",
        "originalExpressionStructureString": "(implic(implic(implic(implic(A;B);C);implic(implic(B;C);A));implic(implic(C;A);B)))",
        "goalExpressionStructureString": "",
        "goalPattern": "or : (and) : : : not",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "SetBase"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "SetAbsorptionLawReduction"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "SetMultiArgumentAnd"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "SetMultiArgumentOr"
          }
        ],
        "rules": [],
        "stepsNumber": 22,
        "time": 300,
        "difficulty": 5.0,
        "otherCheckSolutionData": {}
      },
      {
        "code": "logical_calculus_combo__Level_19_Resolution",
        "version": 0,
        "namespaceCode": "",
        "nameEn": "Level 19 Resolution",
        "nameRu": "Уровень 19 Резолюция",
        "descriptionShortEn": "(0)",
        "descriptionShortRu": "(0)",
        "originalExpressionStructureString": "(and(not(A);implic(not(A);B);implic(B;C);not(C)))",
        "goalExpressionStructureString": "(0)",
        "goalPattern": "",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "SetResolution"
          }
        ],
        "rules": [],
        "stepsNumber": 7,
        "time": 250,
        "difficulty": 5.0,
        "otherCheckSolutionData": {}
      },
      {
        "code": "logical_calculus_combo__Level_20_Resolution",
        "version": 0,
        "namespaceCode": "",
        "nameEn": "Level 20 Resolution",
        "nameRu": "Уровень 20 Резолюция",
        "descriptionShortEn": "(0)",
        "descriptionShortRu": "(0)",
        "originalExpressionStructureString": "(and(or(A;C);implic(D;C);implic(A;D);not(C)))",
        "goalExpressionStructureString": "(0)",
        "goalPattern": "",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "SetResolution"
          }
        ],
        "rules": [],
        "stepsNumber": 9,
        "time": 200,
        "difficulty": 5.0,
        "otherCheckSolutionData": {}
      },
      {
        "code": "logical_calculus_combo__Level_21_Resolution",
        "version": 0,
        "namespaceCode": "",
        "nameEn": "Level 21 Resolution",
        "nameRu": "Уровень 21 Резолюция",
        "descriptionShortEn": "(0)",
        "descriptionShortRu": "(0)",
        "originalExpressionStructureString": "(and(or(A;B;C);implic(A;or(C;D));implic(C;or(B;D));not(B);not(D)))",
        "goalExpressionStructureString": "(0)",
        "goalPattern": "",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "SetResolution"
          }
        ],
        "rules": [],
        "stepsNumber": 16,
        "time": 350,
        "difficulty": 5.0,
        "otherCheckSolutionData": {}
      },
      {
        "code": "logical_calculus_combo__Level_22_Resolution",
        "version": 0,
        "namespaceCode": "",
        "nameEn": "Level 22 Resolution",
        "nameRu": "Уровень 22 Резолюция",
        "descriptionShortEn": "(0)",
        "descriptionShortRu": "(0)",
        "originalExpressionStructureString": "(and(or(A;B);implic(not(C);not(A));implic(not(D);not(B));not(or(C;D));not(or(not(C);not(D)))))",
        "goalExpressionStructureString": "(0)",
        "goalPattern": "",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "SetResolution"
          }
        ],
        "rules": [],
        "stepsNumber": 11,
        "time": 300,
        "difficulty": 5.0,
        "otherCheckSolutionData": {}
      },
      {
        "code": "logical_calculus_combo__Level_23_DNF",
        "version": 0,
        "namespaceCode": "",
        "nameEn": "Level 23 DNF",
        "nameRu": "Уровень 23 DNF",
        "descriptionShortEn": "DNF",
        "descriptionShortRu": "DNF",
        "originalExpressionStructureString": "(and(or(A;B;not(C));or(A;not(B);C);or(not(A);B;C)))",
        "goalExpressionStructureString": "",
        "goalPattern": "or : (and) : : : not",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "SetBase"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "SetAbsorptionLawReduction"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "SetMultiArgumentAnd"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "SetMultiArgumentOr"
          }
        ],
        "rules": [],
        "stepsNumber": 36,
        "time": 400,
        "difficulty": 6.0,
        "otherCheckSolutionData": {}
      },
      {
        "code": "logical_calculus_combo__Level_24_CNF",
        "version": 0,
        "namespaceCode": "",
        "nameEn": "Level 24 CNF",
        "nameRu": "Уровень 24 CNF",
        "descriptionShortEn": "CNF",
        "descriptionShortRu": "CNF",
        "originalExpressionStructureString": "(or(and(A;not(B);not(C));and(A;not(B);C);and(not(A);B;C)))",
        "goalExpressionStructureString": "",
        "goalPattern": "and : (or) : : : not",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "SetBase"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "SetAbsorptionLawReduction"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "SetMultiArgumentAnd"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "SetMultiArgumentOr"
          }
        ],
        "rules": [],
        "stepsNumber": 27,
        "time": 400,
        "difficulty": 6.0,
        "otherCheckSolutionData": {}
      },
      {
        "code": "logical_calculus_combo__Level_25_CNF",
        "version": 0,
        "namespaceCode": "",
        "nameEn": "Level 25 CNF",
        "nameRu": "Уровень 25 CNF",
        "descriptionShortEn": "CNF",
        "descriptionShortRu": "CNF",
        "originalExpressionStructureString": "(or(and(A;not(B));and(C;not(D));and(not(A);B);and(not(C);D)))",
        "goalExpressionStructureString": "",
        "goalPattern": "and : (or) : : : not",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "SetBase"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "SetAbsorptionLawReduction"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "SetMultiArgumentAnd"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "SetMultiArgumentOr"
          }
        ],
        "rules": [],
        "stepsNumber": 27,
        "time": 400,
        "difficulty": 6.0,
        "otherCheckSolutionData": {}
      },
      {
        "code": "logical_calculus_combo__Level_26_DNF",
        "version": 0,
        "namespaceCode": "",
        "nameEn": "Level 26 DNF",
        "nameRu": "Уровень 26 DNF",
        "descriptionShortEn": "DNF",
        "descriptionShortRu": "DNF",
        "originalExpressionStructureString": "(and(or(A;not(B));or(C;not(D));or(not(A);B);or(not(C);D)))",
        "goalExpressionStructureString": "",
        "goalPattern": "or : (and) : : : not",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "SetBase"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "SetAbsorptionLawReduction"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "SetMultiArgumentAnd"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "SetMultiArgumentOr"
          }
        ],
        "rules": [],
        "stepsNumber": 26,
        "time": 400,
        "difficulty": 6.0,
        "otherCheckSolutionData": {}
      },
      {
        "code": "logical_calculus_combo__Level_27_CNF",
        "version": 0,
        "namespaceCode": "",
        "nameEn": "Level 27 CNF",
        "nameRu": "Уровень 27 CNF",
        "descriptionShortEn": "CNF",
        "descriptionShortRu": "CNF",
        "originalExpressionStructureString": "(or(and(A;not(B);C;not(D));and(not(A);B;not(C);D)))",
        "goalExpressionStructureString": "",
        "goalPattern": "and : (or) : : : not",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "SetBase"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "SetAbsorptionLawReduction"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "SetMultiArgumentAnd"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "SetMultiArgumentOr"
          }
        ],
        "rules": [],
        "stepsNumber": 36,
        "time": 400,
        "difficulty": 6.0,
        "otherCheckSolutionData": {}
      },
      {
        "code": "logical_calculus_combo__Level_28_DNF",
        "version": 0,
        "namespaceCode": "",
        "nameEn": "Level 28 DNF",
        "nameRu": "Уровень 28 DNF",
        "descriptionShortEn": "DNF",
        "descriptionShortRu": "DNF",
        "originalExpressionStructureString": "(and(or(A;not(B);C;not(D));or(not(A);B;not(C);D)))",
        "goalExpressionStructureString": "",
        "goalPattern": "or : (and) : : : not",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "SetBase"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "SetAbsorptionLawReduction"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "SetMultiArgumentAnd"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "SetMultiArgumentOr"
          }
        ],
        "rules": [],
        "stepsNumber": 36,
        "time": 400,
        "difficulty": 6.0,
        "otherCheckSolutionData": {}
      },
      {
        "code": "logical_calculus_combo__Level_29_3-DNF",
        "version": 0,
        "namespaceCode": "",
        "nameEn": "Level 29 3-DNF",
        "nameRu": "Уровень 29 3-DNF",
        "descriptionShortEn": "3-DNF",
        "descriptionShortRu": "3-DNF",
        "originalExpressionStructureString": "(and(or(A;B;not(C));or(A;not(B);C);or(not(A);B;C)))",
        "goalExpressionStructureString": "",
        "goalPattern": "or : (and : 3) : : : not",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "SetBase"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "SetAbsorptionLawReduction"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "SetMultiArgumentAnd"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "SetMultiArgumentOr"
          }
        ],
        "rules": [],
        "stepsNumber": 70,
        "time": 400,
        "difficulty": 7.0,
        "otherCheckSolutionData": {}
      },
      {
        "code": "logical_calculus_combo__Level_30_3-CNF",
        "version": 0,
        "namespaceCode": "",
        "nameEn": "Level 30 3-CNF",
        "nameRu": "Уровень 30 3-CNF",
        "descriptionShortEn": "3-CNF",
        "descriptionShortRu": "3-CNF",
        "originalExpressionStructureString": "(or(and(A;not(B);not(C));and(A;not(B);C);and(not(A);B;C)))",
        "goalExpressionStructureString": "",
        "goalPattern": "and : (or : 3) : : : not",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "SetBase"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "SetAbsorptionLawReduction"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "SetMultiArgumentAnd"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "SetMultiArgumentOr"
          }
        ],
        "rules": [],
        "stepsNumber": 70,
        "time": 400,
        "difficulty": 7.0,
        "otherCheckSolutionData": {}
      },
      {
        "code": "logical_calculus_combo__Level_31_3-CNF",
        "version": 0,
        "namespaceCode": "",
        "nameEn": "Level 31 3-CNF",
        "nameRu": "Уровень 31 3-CNF",
        "descriptionShortEn": "3-CNF",
        "descriptionShortRu": "3-CNF",
        "originalExpressionStructureString": "(or(and(A;not(B));and(C;not(D));and(not(A);B);and(not(C);D)))",
        "goalExpressionStructureString": "",
        "goalPattern": "and : (or : 3) : : : not",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "SetBase"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "SetAbsorptionLawReduction"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "SetMultiArgumentAnd"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "SetMultiArgumentOr"
          }
        ],
        "rules": [],
        "stepsNumber": 70,
        "time": 400,
        "difficulty": 7.0,
        "otherCheckSolutionData": {}
      },
      {
        "code": "logical_calculus_combo__Level_32_3-DNF",
        "version": 0,
        "namespaceCode": "",
        "nameEn": "Level 32 3-DNF",
        "nameRu": "Уровень 32 3-DNF",
        "descriptionShortEn": "3-DNF",
        "descriptionShortRu": "3-DNF",
        "originalExpressionStructureString": "(and(or(A;not(B));or(C;not(D));or(not(A);B);or(not(C);D)))",
        "goalExpressionStructureString": "",
        "goalPattern": "or : (and : 3) : : : not",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "SetBase"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "SetAbsorptionLawReduction"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "SetMultiArgumentAnd"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "SetMultiArgumentOr"
          }
        ],
        "rules": [],
        "stepsNumber": 70,
        "time": 400,
        "difficulty": 7.0,
        "otherCheckSolutionData": {}
      },
      {
        "code": "logical_calculus_combo__Level_33_3-CNF",
        "version": 0,
        "namespaceCode": "",
        "nameEn": "Level 33 3-CNF",
        "nameRu": "Уровень 33 3-CNF",
        "descriptionShortEn": "3-CNF",
        "descriptionShortRu": "3-CNF",
        "originalExpressionStructureString": "(or(and(A;not(B);C;not(D));and(not(A);B;not(C);D)))",
        "goalExpressionStructureString": "",
        "goalPattern": "and : (or : 3) : : : not",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "SetBase"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "SetAbsorptionLawReduction"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "SetMultiArgumentAnd"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "SetMultiArgumentOr"
          }
        ],
        "rules": [],
        "stepsNumber": 70,
        "time": 400,
        "difficulty": 7.0,
        "otherCheckSolutionData": {}
      },
      {
        "code": "logical_calculus_combo__Level_34_3-DNF",
        "version": 0,
        "namespaceCode": "",
        "nameEn": "Level 34 3-DNF",
        "nameRu": "Уровень 34 3-DNF",
        "descriptionShortEn": "3-DNF",
        "descriptionShortRu": "3-DNF",
        "originalExpressionStructureString": "(and(or(A;not(B);C;not(D));or(not(A);B;not(C);D)))",
        "goalExpressionStructureString": "",
        "goalPattern": "or : (and : 3) : : : not",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "SetBase"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "SetAbsorptionLawReduction"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "SetMultiArgumentAnd"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "SetMultiArgumentOr"
          }
        ],
        "rules": [],
        "stepsNumber": 70,
        "time": 400,
        "difficulty": 7.0,
        "otherCheckSolutionData": {}
      }
    ]
  },
  "rulePacks": [
    {
      "code": "SetBase",
      "version": 0,
      "namespaceCode": "",
      "subjectType": "standard_math",
      "rulePacks": [
        {
          "namespaceCode": "",
          "rulePackCode": "SetTrivialLetters"
        },
        {
          "namespaceCode": "",
          "rulePackCode": "SetThreeСommutativity"
        },
        {
          "namespaceCode": "",
          "rulePackCode": "SetThreeAssociativity"
        },
        {
          "namespaceCode": "",
          "rulePackCode": "SetDeMorgan"
        },
        {
          "namespaceCode": "",
          "rulePackCode": "SetImplication"
        },
        {
          "namespaceCode": "",
          "rulePackCode": "SetDifference"
        },
        {
          "namespaceCode": "",
          "rulePackCode": "SetEmptyAndUniverse"
        }
      ],
      "rules": [
        {
          "code": "SimpleComputation",
          "priority": 5
        },
        {
          "code": "ZeroComputation",
          "priority": 5
        },
        {
          "code": "NumberPlusMinus1",
          "priority": 20
        },
        {
          "code": "MultiplicationFactorization",
          "priority": 15
        },
        {
          "code": "DecimalToFraction",
          "priority": 15
        },
        {
          "code": "PowFactorization",
          "priority": 15
        }
      ]
    },
    {
      "code": "SetThreeСommutativity",
      "version": 0,
      "namespaceCode": "",
      "subjectType": "set",
      "rulePacks": [],
      "rules": [
        {
          "leftStructureString": "(or(A;or(B;C)))",
          "rightStructureString": "(or(A;B;C))"
        },
        {
          "leftStructureString": "(or(A;B;C))",
          "rightStructureString": "(or(A;or(B;C)))"
        },
        {
          "leftStructureString": "(or(A;or(B;C)))",
          "rightStructureString": "(or(or(A;B);C))"
        },
        {
          "leftStructureString": "(or(or(A;B);C))",
          "rightStructureString": "(or(A;or(B;C)))"
        },
        {
          "leftStructureString": "(or(or(A;B);C))",
          "rightStructureString": "(or(A;B;C))"
        },
        {
          "leftStructureString": "(or(A;B;C))",
          "rightStructureString": "(or(or(A;B);C))"
        },
        {
          "leftStructureString": "(and(A;and(B;C)))",
          "rightStructureString": "(and(A;B;C))"
        },
        {
          "leftStructureString": "(and(A;B;C))",
          "rightStructureString": "(and(A;and(B;C)))"
        },
        {
          "leftStructureString": "(and(A;and(B;C)))",
          "rightStructureString": "(and(and(A;B);C))"
        },
        {
          "leftStructureString": "(and(and(A;B);C))",
          "rightStructureString": "(and(A;and(B;C)))"
        },
        {
          "leftStructureString": "(and(and(A;B);C))",
          "rightStructureString": "(and(A;B;C))"
        },
        {
          "leftStructureString": "(and(A;B;C))",
          "rightStructureString": "(and(and(A;B);C))"
        }
      ]
    },
    {
      "code": "SetThreeAssociativity",
      "version": 0,
      "namespaceCode": "",
      "subjectType": "set",
      "rulePacks": [],
      "rules": [
        {
          "leftStructureString": "(or(A;and(B;C)))",
          "rightStructureString": "(and(or(A;B);or(A;C)))"
        },
        {
          "leftStructureString": "(or(and(B;C);A))",
          "rightStructureString": "(and(or(B;A);or(C;A)))"
        },
        {
          "leftStructureString": "(and(or(A;B);or(A;C)))",
          "rightStructureString": "(or(A;and(B;C)))"
        },
        {
          "leftStructureString": "(and(or(B;C);or(A;C)))",
          "rightStructureString": "(or(and(B;A);C))"
        },
        {
          "leftStructureString": "(and(A;or(B;C)))",
          "rightStructureString": "(or(and(A;B);and(A;C)))"
        },
        {
          "leftStructureString": "(and(or(B;C);A))",
          "rightStructureString": "(or(and(B;A);and(C;A)))"
        },
        {
          "leftStructureString": "(or(and(A;B);and(A;C)))",
          "rightStructureString": "(and(A;or(B;C)))"
        },
        {
          "leftStructureString": "(or(and(B;C);and(A;C)))",
          "rightStructureString": "(and(or(B;A);C))"
        }
      ]
    },
    {
      "code": "SetTwoСommutativity",
      "version": 0,
      "namespaceCode": "",
      "subjectType": "set",
      "rulePacks": [],
      "rules": [
        {
          "leftStructureString": "(and(A;B))",
          "rightStructureString": "(and(B;A))"
        },
        {
          "leftStructureString": "(or(A;B))",
          "rightStructureString": "(or(B;A))"
        }
      ]
    },
    {
      "code": "SetTrivialLetters",
      "version": 0,
      "namespaceCode": "",
      "subjectType": "set",
      "rulePacks": [
        {
          "namespaceCode": "",
          "rulePackCode": "SetTwoСommutativity"
        }
      ],
      "rules": [
        {
          "leftStructureString": "(not(not(A)))",
          "rightStructureString": "(A)"
        },
        {
          "leftStructureString": "(A)",
          "rightStructureString": "(not(not(A)))"
        },
        {
          "leftStructureString": "(or(A;A))",
          "rightStructureString": "(A)"
        },
        {
          "leftStructureString": "(A)",
          "rightStructureString": "(or(A;A))"
        },
        {
          "leftStructureString": "(and(A;A))",
          "rightStructureString": "(A)"
        },
        {
          "leftStructureString": "(A)",
          "rightStructureString": "(and(A;A))"
        }
      ]
    },
    {
      "code": "SetDeMorgan",
      "version": 0,
      "namespaceCode": "",
      "subjectType": "set",
      "rulePacks": [],
      "rules": [
        {
          "leftStructureString": "(not(and(A;B)))",
          "rightStructureString": "(or(not(A);not(B)))"
        },
        {
          "leftStructureString": "(or(not(A);not(B)))",
          "rightStructureString": "(not(and(A;B)))"
        },
        {
          "leftStructureString": "(not(or(A;B)))",
          "rightStructureString": "(and(not(A);not(B)))"
        },
        {
          "leftStructureString": "(and(not(A);not(B)))",
          "rightStructureString": "(not(or(A;B)))"
        }
      ]
    },
    {
      "code": "SetImplication",
      "version": 0,
      "namespaceCode": "",
      "subjectType": "set",
      "rulePacks": [],
      "rules": [
        {
          "leftStructureString": "(or(not(A);B))",
          "rightStructureString": "(implic(A;B))"
        },
        {
          "leftStructureString": "(or(B;not(A)))",
          "rightStructureString": "(implic(A;B))"
        },
        {
          "leftStructureString": "(implic(A;B))",
          "rightStructureString": "(or(not(A);B))"
        }
      ]
    },
    {
      "code": "SetDifference",
      "version": 0,
      "namespaceCode": "",
      "subjectType": "set",
      "rulePacks": [],
      "rules": [
        {
          "leftStructureString": "(and(A;not(B)))",
          "rightStructureString": "(set-(A;B))"
        },
        {
          "leftStructureString": "(and(not(B);A))",
          "rightStructureString": "(set-(A;B))"
        },
        {
          "leftStructureString": "(set-(A;B))",
          "rightStructureString": "(and(A;not(B)))"
        }
      ]
    },
    {
      "code": "SetDifferenceImplication",
      "version": 0,
      "namespaceCode": "",
      "subjectType": "set",
      "rulePacks": [],
      "rules": [
        {
          "leftStructureString": "(set-(A;B))",
          "rightStructureString": "(not(implic(A;B)))"
        },
        {
          "leftStructureString": "(not(implic(A;B)))",
          "rightStructureString": "(set-(A;B))"
        },
        {
          "leftStructureString": "(implic(A;B))",
          "rightStructureString": "(not(set-(A;B)))"
        },
        {
          "leftStructureString": "(not(set-(A;B)))",
          "rightStructureString": "(implic(A;B))"
        }
      ]
    },
    {
      "code": "SetAbsorptionLawReduction",
      "version": 0,
      "namespaceCode": "",
      "subjectType": "set",
      "rulePacks": [],
      "rules": [
        {
          "leftStructureString": "(and(A;or(A;B)))",
          "rightStructureString": "(A)"
        },
        {
          "leftStructureString": "(or(A;and(A;B)))",
          "rightStructureString": "(A)"
        },
        {
          "leftStructureString": "(and(A;or(B;A)))",
          "rightStructureString": "(A)"
        },
        {
          "leftStructureString": "(or(A;and(B;A)))",
          "rightStructureString": "(A)"
        },
        {
          "leftStructureString": "(and(or(A;B);A))",
          "rightStructureString": "(A)"
        },
        {
          "leftStructureString": "(or(and(A;B);A))",
          "rightStructureString": "(A)"
        },
        {
          "leftStructureString": "(and(or(B;A);A))",
          "rightStructureString": "(A)"
        },
        {
          "leftStructureString": "(or(and(B;A);A))",
          "rightStructureString": "(A)"
        }
      ]
    },
    {
      "code": "SetAbsorptionLawExtension",
      "version": 0,
      "namespaceCode": "",
      "subjectType": "set",
      "rulePacks": [],
      "rules": [
        {
          "leftStructureString": "(A)",
          "rightStructureString": "(and(A;or(A;B)))"
        },
        {
          "leftStructureString": "(A)",
          "rightStructureString": "(or(A;and(A;B)))"
        }
      ]
    },
    {
      "code": "SetEmptyAndUniverse",
      "version": 0,
      "namespaceCode": "",
      "subjectType": "set",
      "rulePacks": [
        {
          "namespaceCode": "",
          "rulePackCode": "SetEmptyAndUniverseExtension"
        }
      ],
      "rules": [
        {
          "leftStructureString": "(or(A;not(A)))",
          "rightStructureString": "(1)"
        },
        {
          "leftStructureString": "(or(not(A);A))",
          "rightStructureString": "(1)"
        },
        {
          "leftStructureString": "(and(A;not(A)))",
          "rightStructureString": "(0)"
        },
        {
          "leftStructureString": "(and(not(A);A))",
          "rightStructureString": "(0)"
        },
        {
          "leftStructureString": "(or(A;1))",
          "rightStructureString": "(1)"
        },
        {
          "leftStructureString": "(or(1;A))",
          "rightStructureString": "(1)"
        },
        {
          "leftStructureString": "(and(A;1))",
          "rightStructureString": "(A)"
        },
        {
          "leftStructureString": "(and(1;A))",
          "rightStructureString": "(A)"
        },
        {
          "leftStructureString": "(or(A;0))",
          "rightStructureString": "(A)"
        },
        {
          "leftStructureString": "(or(0;A))",
          "rightStructureString": "(A)"
        },
        {
          "leftStructureString": "(and(A;0))",
          "rightStructureString": "(0)"
        },
        {
          "leftStructureString": "(and(0;A))",
          "rightStructureString": "(0)"
        },
        {
          "leftStructureString": "(set-(A;0))",
          "rightStructureString": "(A)"
        },
        {
          "leftStructureString": "(set-(A;1))",
          "rightStructureString": "(0)"
        },
        {
          "leftStructureString": "(set-(0;A))",
          "rightStructureString": "(0)"
        },
        {
          "leftStructureString": "(set-(1;A))",
          "rightStructureString": "(not(A))"
        },
        {
          "leftStructureString": "(implic(0;A))",
          "rightStructureString": "(1)"
        },
        {
          "leftStructureString": "(implic(A;1))",
          "rightStructureString": "(1)"
        },
        {
          "leftStructureString": "(implic(A;0))",
          "rightStructureString": "(not(A))"
        },
        {
          "leftStructureString": "(implic(1;A))",
          "rightStructureString": "(A)"
        },
        {
          "leftStructureString": "(not(0))",
          "rightStructureString": "(1)"
        },
        {
          "leftStructureString": "(not(1))",
          "rightStructureString": "(0)"
        }
      ]
    },
    {
      "code": "SetEmptyAndUniverseExtension",
      "version": 0,
      "namespaceCode": "",
      "subjectType": "set",
      "rulePacks": [],
      "rules": [
        {
          "leftStructureString": "(A)",
          "rightStructureString": "(or(A;0))"
        },
        {
          "leftStructureString": "(A)",
          "rightStructureString": "(and(A;1))"
        },
        {
          "leftStructureString": "(A)",
          "rightStructureString": "(set-(A;0))"
        },
        {
          "leftStructureString": "(A)",
          "rightStructureString": "(implic(1;A))"
        }
      ]
    },
    {
      "code": "SetMultiArgumentAnd",
      "version": 0,
      "namespaceCode": "",
      "subjectType": "set",
      "rulePacks": [],
      "rules": [
        {
          "leftStructureString": "(and(and(A;B);and(C;D)))",
          "rightStructureString": "(and(A;B;C;D))"
        },
        {
          "leftStructureString": "(and(A;and(B;C;D)))",
          "rightStructureString": "(and(A;B;C;D))"
        },
        {
          "leftStructureString": "(and(and(A;B;C);D))",
          "rightStructureString": "(and(A;B;C;D))"
        },
        {
          "leftStructureString": "(and(A;B;and(C;D)))",
          "rightStructureString": "(and(A;B;C;D))"
        },
        {
          "leftStructureString": "(and(A;B;C;D))",
          "rightStructureString": "(and(A;B;and(C;D)))"
        },
        {
          "leftStructureString": "(and(A;and(B;C);D))",
          "rightStructureString": "(and(A;B;C;D))"
        },
        {
          "leftStructureString": "(and(A;B;C;D))",
          "rightStructureString": "(and(A;and(B;C);D))"
        },
        {
          "leftStructureString": "(and(and(A;B);C;D))",
          "rightStructureString": "(and(A;B;C;D))"
        },
        {
          "leftStructureString": "(and(A;B;C;D))",
          "rightStructureString": "(and(and(A;B);C;D))"
        },
        {
          "leftStructureString": "(and(A;B;C;and(D;E)))",
          "rightStructureString": "(and(A;B;C;D;E))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E))",
          "rightStructureString": "(and(A;B;C;and(D;E)))"
        },
        {
          "leftStructureString": "(and(A;B;and(C;D);E))",
          "rightStructureString": "(and(A;B;C;D;E))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E))",
          "rightStructureString": "(and(A;B;and(C;D);E))"
        },
        {
          "leftStructureString": "(and(A;and(B;C);D;E))",
          "rightStructureString": "(and(A;B;C;D;E))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E))",
          "rightStructureString": "(and(A;and(B;C);D;E))"
        },
        {
          "leftStructureString": "(and(and(A;B);C;D;E))",
          "rightStructureString": "(and(A;B;C;D;E))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E))",
          "rightStructureString": "(and(and(A;B);C;D;E))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;and(E;F)))",
          "rightStructureString": "(and(A;B;C;D;E;F))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F))",
          "rightStructureString": "(and(A;B;C;D;and(E;F)))"
        },
        {
          "leftStructureString": "(and(A;B;C;and(D;E);F))",
          "rightStructureString": "(and(A;B;C;D;E;F))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F))",
          "rightStructureString": "(and(A;B;C;and(D;E);F))"
        },
        {
          "leftStructureString": "(and(A;B;and(C;D);E;F))",
          "rightStructureString": "(and(A;B;C;D;E;F))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F))",
          "rightStructureString": "(and(A;B;and(C;D);E;F))"
        },
        {
          "leftStructureString": "(and(A;and(B;C);D;E;F))",
          "rightStructureString": "(and(A;B;C;D;E;F))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F))",
          "rightStructureString": "(and(A;and(B;C);D;E;F))"
        },
        {
          "leftStructureString": "(and(and(A;B);C;D;E;F))",
          "rightStructureString": "(and(A;B;C;D;E;F))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F))",
          "rightStructureString": "(and(and(A;B);C;D;E;F))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;and(F;G)))",
          "rightStructureString": "(and(A;B;C;D;E;F;G))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G))",
          "rightStructureString": "(and(A;B;C;D;E;and(F;G)))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;and(E;F);G))",
          "rightStructureString": "(and(A;B;C;D;E;F;G))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G))",
          "rightStructureString": "(and(A;B;C;D;and(E;F);G))"
        },
        {
          "leftStructureString": "(and(A;B;C;and(D;E);F;G))",
          "rightStructureString": "(and(A;B;C;D;E;F;G))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G))",
          "rightStructureString": "(and(A;B;C;and(D;E);F;G))"
        },
        {
          "leftStructureString": "(and(A;B;and(C;D);E;F;G))",
          "rightStructureString": "(and(A;B;C;D;E;F;G))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G))",
          "rightStructureString": "(and(A;B;and(C;D);E;F;G))"
        },
        {
          "leftStructureString": "(and(A;and(B;C);D;E;F;G))",
          "rightStructureString": "(and(A;B;C;D;E;F;G))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G))",
          "rightStructureString": "(and(A;and(B;C);D;E;F;G))"
        },
        {
          "leftStructureString": "(and(and(A;B);C;D;E;F;G))",
          "rightStructureString": "(and(A;B;C;D;E;F;G))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G))",
          "rightStructureString": "(and(and(A;B);C;D;E;F;G))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;and(G;H)))",
          "rightStructureString": "(and(A;B;C;D;E;F;G;H))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G;H))",
          "rightStructureString": "(and(A;B;C;D;E;F;and(G;H)))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;and(F;G);H))",
          "rightStructureString": "(and(A;B;C;D;E;F;G;H))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G;H))",
          "rightStructureString": "(and(A;B;C;D;E;and(F;G);H))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;and(E;F);G;H))",
          "rightStructureString": "(and(A;B;C;D;E;F;G;H))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G;H))",
          "rightStructureString": "(and(A;B;C;D;and(E;F);G;H))"
        },
        {
          "leftStructureString": "(and(A;B;C;and(D;E);F;G;H))",
          "rightStructureString": "(and(A;B;C;D;E;F;G;H))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G;H))",
          "rightStructureString": "(and(A;B;C;and(D;E);F;G;H))"
        },
        {
          "leftStructureString": "(and(A;B;and(C;D);E;F;G;H))",
          "rightStructureString": "(and(A;B;C;D;E;F;G;H))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G;H))",
          "rightStructureString": "(and(A;B;and(C;D);E;F;G;H))"
        },
        {
          "leftStructureString": "(and(A;and(B;C);D;E;F;G;H))",
          "rightStructureString": "(and(A;B;C;D;E;F;G;H))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G;H))",
          "rightStructureString": "(and(A;and(B;C);D;E;F;G;H))"
        },
        {
          "leftStructureString": "(and(and(A;B);C;D;E;F;G;H))",
          "rightStructureString": "(and(A;B;C;D;E;F;G;H))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G;H))",
          "rightStructureString": "(and(and(A;B);C;D;E;F;G;H))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;and(G;H)))",
          "rightStructureString": "(and(A;B;C;D;E;F;G;H))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G;H))",
          "rightStructureString": "(and(A;B;C;D;E;F;and(G;H)))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;and(F;G);H))",
          "rightStructureString": "(and(A;B;C;D;E;F;G;H))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G;H))",
          "rightStructureString": "(and(A;B;C;D;E;and(F;G);H))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;and(E;F);G;H))",
          "rightStructureString": "(and(A;B;C;D;E;F;G;H))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G;H))",
          "rightStructureString": "(and(A;B;C;D;and(E;F);G;H))"
        },
        {
          "leftStructureString": "(and(A;B;C;and(D;E);F;G;H))",
          "rightStructureString": "(and(A;B;C;D;E;F;G;H))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G;H))",
          "rightStructureString": "(and(A;B;C;and(D;E);F;G;H))"
        },
        {
          "leftStructureString": "(and(A;B;and(C;D);E;F;G;H))",
          "rightStructureString": "(and(A;B;C;D;E;F;G;H))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G;H))",
          "rightStructureString": "(and(A;B;and(C;D);E;F;G;H))"
        },
        {
          "leftStructureString": "(and(A;and(B;C);D;E;F;G;H))",
          "rightStructureString": "(and(A;B;C;D;E;F;G;H))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G;H))",
          "rightStructureString": "(and(A;and(B;C);D;E;F;G;H))"
        },
        {
          "leftStructureString": "(and(and(A;B);C;D;E;F;G;H))",
          "rightStructureString": "(and(A;B;C;D;E;F;G;H))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G;H))",
          "rightStructureString": "(and(and(A;B);C;D;E;F;G;H))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G;and(H;I)))",
          "rightStructureString": "(and(A;B;C;D;E;F;G;H;I))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G;H;I))",
          "rightStructureString": "(and(A;B;C;D;E;F;G;and(H;I)))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;and(G;H);I))",
          "rightStructureString": "(and(A;B;C;D;E;F;G;H;I))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G;H;I))",
          "rightStructureString": "(and(A;B;C;D;E;F;and(G;H);I))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;and(F;G);H;I))",
          "rightStructureString": "(and(A;B;C;D;E;F;G;H;I))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G;H;I))",
          "rightStructureString": "(and(A;B;C;D;E;and(F;G);H;I))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;and(E;F);G;H;I))",
          "rightStructureString": "(and(A;B;C;D;E;F;G;H;I))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G;H;I))",
          "rightStructureString": "(and(A;B;C;D;and(E;F);G;H;I))"
        },
        {
          "leftStructureString": "(and(A;B;C;and(D;E);F;G;H;I))",
          "rightStructureString": "(and(A;B;C;D;E;F;G;H;I))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G;H;I))",
          "rightStructureString": "(and(A;B;C;and(D;E);F;G;H;I))"
        },
        {
          "leftStructureString": "(and(A;B;and(C;D);E;F;G;H;I))",
          "rightStructureString": "(and(A;B;C;D;E;F;G;H;I))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G;H;I))",
          "rightStructureString": "(and(A;B;and(C;D);E;F;G;H;I))"
        },
        {
          "leftStructureString": "(and(A;and(B;C);D;E;F;G;H;I))",
          "rightStructureString": "(and(A;B;C;D;E;F;G;H;I))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G;H;I))",
          "rightStructureString": "(and(A;and(B;C);D;E;F;G;H;I))"
        },
        {
          "leftStructureString": "(and(and(A;B);C;D;E;F;G;H;I))",
          "rightStructureString": "(and(A;B;C;D;E;F;G;H;I))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G;H;I))",
          "rightStructureString": "(and(and(A;B);C;D;E;F;G;H;I))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G;H;and(I;J)))",
          "rightStructureString": "(and(A;B;C;D;E;F;G;H;I;J))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G;H;I;J))",
          "rightStructureString": "(and(A;B;C;D;E;F;G;H;and(I;J)))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G;and(H;I);J))",
          "rightStructureString": "(and(A;B;C;D;E;F;G;H;I;J))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G;H;I;J))",
          "rightStructureString": "(and(A;B;C;D;E;F;G;and(H;I);J))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;and(G;H);I;J))",
          "rightStructureString": "(and(A;B;C;D;E;F;G;H;I;J))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G;H;I;J))",
          "rightStructureString": "(and(A;B;C;D;E;F;and(G;H);I;J))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;and(F;G);H;I;J))",
          "rightStructureString": "(and(A;B;C;D;E;F;G;H;I;J))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G;H;I;J))",
          "rightStructureString": "(and(A;B;C;D;E;and(F;G);H;I;J))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;and(E;F);G;H;I;J))",
          "rightStructureString": "(and(A;B;C;D;E;F;G;H;I;J))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G;H;I;J))",
          "rightStructureString": "(and(A;B;C;D;and(E;F);G;H;I;J))"
        },
        {
          "leftStructureString": "(and(A;B;C;and(D;E);F;G;H;I;J))",
          "rightStructureString": "(and(A;B;C;D;E;F;G;H;I;J))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G;H;I;J))",
          "rightStructureString": "(and(A;B;C;and(D;E);F;G;H;I;J))"
        },
        {
          "leftStructureString": "(and(A;B;and(C;D);E;F;G;H;I;J))",
          "rightStructureString": "(and(A;B;C;D;E;F;G;H;I;J))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G;H;I;J))",
          "rightStructureString": "(and(A;B;and(C;D);E;F;G;H;I;J))"
        },
        {
          "leftStructureString": "(and(A;and(B;C);D;E;F;G;H;I;J))",
          "rightStructureString": "(and(A;B;C;D;E;F;G;H;I;J))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G;H;I;J))",
          "rightStructureString": "(and(A;and(B;C);D;E;F;G;H;I;J))"
        },
        {
          "leftStructureString": "(and(and(A;B);C;D;E;F;G;H;I;J))",
          "rightStructureString": "(and(A;B;C;D;E;F;G;H;I;J))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G;H;I;J))",
          "rightStructureString": "(and(and(A;B);C;D;E;F;G;H;I;J))"
        }
      ]
    },
    {
      "code": "SetMultiArgumentOr",
      "version": 0,
      "namespaceCode": "",
      "subjectType": "set",
      "rulePacks": [],
      "rules": [
        {
          "leftStructureString": "(or(or(A;B);or(C;D)))",
          "rightStructureString": "(or(A;B;C;D))"
        },
        {
          "leftStructureString": "(or(A;or(B;C;D)))",
          "rightStructureString": "(or(A;B;C;D))"
        },
        {
          "leftStructureString": "(or(or(A;B;C);D))",
          "rightStructureString": "(or(A;B;C;D))"
        },
        {
          "leftStructureString": "(or(A;B;or(C;D)))",
          "rightStructureString": "(or(A;B;C;D))"
        },
        {
          "leftStructureString": "(or(A;B;C;D))",
          "rightStructureString": "(or(A;B;or(C;D)))"
        },
        {
          "leftStructureString": "(or(A;or(B;C);D))",
          "rightStructureString": "(or(A;B;C;D))"
        },
        {
          "leftStructureString": "(or(A;B;C;D))",
          "rightStructureString": "(or(A;or(B;C);D))"
        },
        {
          "leftStructureString": "(or(or(A;B);C;D))",
          "rightStructureString": "(or(A;B;C;D))"
        },
        {
          "leftStructureString": "(or(A;B;C;D))",
          "rightStructureString": "(or(or(A;B);C;D))"
        },
        {
          "leftStructureString": "(or(A;B;C;or(D;E)))",
          "rightStructureString": "(or(A;B;C;D;E))"
        },
        {
          "leftStructureString": "(or(A;B;C;D;E))",
          "rightStructureString": "(or(A;B;C;or(D;E)))"
        },
        {
          "leftStructureString": "(or(A;B;or(C;D);E))",
          "rightStructureString": "(or(A;B;C;D;E))"
        },
        {
          "leftStructureString": "(or(A;B;C;D;E))",
          "rightStructureString": "(or(A;B;or(C;D);E))"
        },
        {
          "leftStructureString": "(or(A;or(B;C);D;E))",
          "rightStructureString": "(or(A;B;C;D;E))"
        },
        {
          "leftStructureString": "(or(A;B;C;D;E))",
          "rightStructureString": "(or(A;or(B;C);D;E))"
        },
        {
          "leftStructureString": "(or(or(A;B);C;D;E))",
          "rightStructureString": "(or(A;B;C;D;E))"
        },
        {
          "leftStructureString": "(or(A;B;C;D;E))",
          "rightStructureString": "(or(or(A;B);C;D;E))"
        },
        {
          "leftStructureString": "(or(A;B;C;D;or(E;F)))",
          "rightStructureString": "(or(A;B;C;D;E;F))"
        },
        {
          "leftStructureString": "(or(A;B;C;D;E;F))",
          "rightStructureString": "(or(A;B;C;D;or(E;F)))"
        },
        {
          "leftStructureString": "(or(A;B;C;or(D;E);F))",
          "rightStructureString": "(or(A;B;C;D;E;F))"
        },
        {
          "leftStructureString": "(or(A;B;C;D;E;F))",
          "rightStructureString": "(or(A;B;C;or(D;E);F))"
        },
        {
          "leftStructureString": "(or(A;B;or(C;D);E;F))",
          "rightStructureString": "(or(A;B;C;D;E;F))"
        },
        {
          "leftStructureString": "(or(A;B;C;D;E;F))",
          "rightStructureString": "(or(A;B;or(C;D);E;F))"
        },
        {
          "leftStructureString": "(or(A;or(B;C);D;E;F))",
          "rightStructureString": "(or(A;B;C;D;E;F))"
        },
        {
          "leftStructureString": "(or(A;B;C;D;E;F))",
          "rightStructureString": "(or(A;or(B;C);D;E;F))"
        },
        {
          "leftStructureString": "(or(or(A;B);C;D;E;F))",
          "rightStructureString": "(or(A;B;C;D;E;F))"
        },
        {
          "leftStructureString": "(or(A;B;C;D;E;F))",
          "rightStructureString": "(or(or(A;B);C;D;E;F))"
        },
        {
          "leftStructureString": "(or(A;B;C;D;E;or(F;G)))",
          "rightStructureString": "(or(A;B;C;D;E;F;G))"
        },
        {
          "leftStructureString": "(or(A;B;C;D;E;F;G))",
          "rightStructureString": "(or(A;B;C;D;E;or(F;G)))"
        },
        {
          "leftStructureString": "(or(A;B;C;D;or(E;F);G))",
          "rightStructureString": "(or(A;B;C;D;E;F;G))"
        },
        {
          "leftStructureString": "(or(A;B;C;D;E;F;G))",
          "rightStructureString": "(or(A;B;C;D;or(E;F);G))"
        },
        {
          "leftStructureString": "(or(A;B;C;or(D;E);F;G))",
          "rightStructureString": "(or(A;B;C;D;E;F;G))"
        },
        {
          "leftStructureString": "(or(A;B;C;D;E;F;G))",
          "rightStructureString": "(or(A;B;C;or(D;E);F;G))"
        },
        {
          "leftStructureString": "(or(A;B;or(C;D);E;F;G))",
          "rightStructureString": "(or(A;B;C;D;E;F;G))"
        },
        {
          "leftStructureString": "(or(A;B;C;D;E;F;G))",
          "rightStructureString": "(or(A;B;or(C;D);E;F;G))"
        },
        {
          "leftStructureString": "(or(A;or(B;C);D;E;F;G))",
          "rightStructureString": "(or(A;B;C;D;E;F;G))"
        },
        {
          "leftStructureString": "(or(A;B;C;D;E;F;G))",
          "rightStructureString": "(or(A;or(B;C);D;E;F;G))"
        },
        {
          "leftStructureString": "(or(or(A;B);C;D;E;F;G))",
          "rightStructureString": "(or(A;B;C;D;E;F;G))"
        },
        {
          "leftStructureString": "(or(A;B;C;D;E;F;G))",
          "rightStructureString": "(or(or(A;B);C;D;E;F;G))"
        },
        {
          "leftStructureString": "(or(A;B;C;D;E;F;G;or(H;I)))",
          "rightStructureString": "(or(A;B;C;D;E;F;G;H;I))"
        },
        {
          "leftStructureString": "(or(A;B;C;D;E;F;G;H;I))",
          "rightStructureString": "(or(A;B;C;D;E;F;G;or(H;I)))"
        },
        {
          "leftStructureString": "(or(A;B;C;D;E;F;or(G;H);I))",
          "rightStructureString": "(or(A;B;C;D;E;F;G;H;I))"
        },
        {
          "leftStructureString": "(or(A;B;C;D;E;F;G;H;I))",
          "rightStructureString": "(or(A;B;C;D;E;F;or(G;H);I))"
        },
        {
          "leftStructureString": "(or(A;B;C;D;E;or(F;G);H;I))",
          "rightStructureString": "(or(A;B;C;D;E;F;G;H;I))"
        },
        {
          "leftStructureString": "(or(A;B;C;D;E;F;G;H;I))",
          "rightStructureString": "(or(A;B;C;D;E;or(F;G);H;I))"
        },
        {
          "leftStructureString": "(or(A;B;C;D;or(E;F);G;H;I))",
          "rightStructureString": "(or(A;B;C;D;E;F;G;H;I))"
        },
        {
          "leftStructureString": "(or(A;B;C;D;E;F;G;H;I))",
          "rightStructureString": "(or(A;B;C;D;or(E;F);G;H;I))"
        },
        {
          "leftStructureString": "(or(A;B;C;or(D;E);F;G;H;I))",
          "rightStructureString": "(or(A;B;C;D;E;F;G;H;I))"
        },
        {
          "leftStructureString": "(or(A;B;C;D;E;F;G;H;I))",
          "rightStructureString": "(or(A;B;C;or(D;E);F;G;H;I))"
        },
        {
          "leftStructureString": "(or(A;B;or(C;D);E;F;G;H;I))",
          "rightStructureString": "(or(A;B;C;D;E;F;G;H;I))"
        },
        {
          "leftStructureString": "(or(A;B;C;D;E;F;G;H;I))",
          "rightStructureString": "(or(A;B;or(C;D);E;F;G;H;I))"
        },
        {
          "leftStructureString": "(or(A;or(B;C);D;E;F;G;H;I))",
          "rightStructureString": "(or(A;B;C;D;E;F;G;H;I))"
        },
        {
          "leftStructureString": "(or(A;B;C;D;E;F;G;H;I))",
          "rightStructureString": "(or(A;or(B;C);D;E;F;G;H;I))"
        },
        {
          "leftStructureString": "(or(or(A;B);C;D;E;F;G;H;I))",
          "rightStructureString": "(or(A;B;C;D;E;F;G;H;I))"
        },
        {
          "leftStructureString": "(or(A;B;C;D;E;F;G;H;I))",
          "rightStructureString": "(or(or(A;B);C;D;E;F;G;H;I))"
        },
        {
          "leftStructureString": "(or(A;B;C;D;E;F;G;H;or(I;J)))",
          "rightStructureString": "(or(A;B;C;D;E;F;G;H;I;J))"
        },
        {
          "leftStructureString": "(or(A;B;C;D;E;F;G;H;I;J))",
          "rightStructureString": "(or(A;B;C;D;E;F;G;H;or(I;J)))"
        },
        {
          "leftStructureString": "(or(A;B;C;D;E;F;G;or(H;I);J))",
          "rightStructureString": "(or(A;B;C;D;E;F;G;H;I;J))"
        },
        {
          "leftStructureString": "(or(A;B;C;D;E;F;G;H;I;J))",
          "rightStructureString": "(or(A;B;C;D;E;F;G;or(H;I);J))"
        },
        {
          "leftStructureString": "(or(A;B;C;D;E;F;or(G;H);I;J))",
          "rightStructureString": "(or(A;B;C;D;E;F;G;H;I;J))"
        },
        {
          "leftStructureString": "(or(A;B;C;D;E;F;G;H;I;J))",
          "rightStructureString": "(or(A;B;C;D;E;F;or(G;H);I;J))"
        },
        {
          "leftStructureString": "(or(A;B;C;D;E;or(F;G);H;I;J))",
          "rightStructureString": "(or(A;B;C;D;E;F;G;H;I;J))"
        },
        {
          "leftStructureString": "(or(A;B;C;D;E;F;G;H;I;J))",
          "rightStructureString": "(or(A;B;C;D;E;or(F;G);H;I;J))"
        },
        {
          "leftStructureString": "(or(A;B;C;D;or(E;F);G;H;I;J))",
          "rightStructureString": "(or(A;B;C;D;E;F;G;H;I;J))"
        },
        {
          "leftStructureString": "(or(A;B;C;D;E;F;G;H;I;J))",
          "rightStructureString": "(or(A;B;C;D;or(E;F);G;H;I;J))"
        },
        {
          "leftStructureString": "(or(A;B;C;or(D;E);F;G;H;I;J))",
          "rightStructureString": "(or(A;B;C;D;E;F;G;H;I;J))"
        },
        {
          "leftStructureString": "(or(A;B;C;D;E;F;G;H;I;J))",
          "rightStructureString": "(or(A;B;C;or(D;E);F;G;H;I;J))"
        },
        {
          "leftStructureString": "(or(A;B;or(C;D);E;F;G;H;I;J))",
          "rightStructureString": "(or(A;B;C;D;E;F;G;H;I;J))"
        },
        {
          "leftStructureString": "(or(A;B;C;D;E;F;G;H;I;J))",
          "rightStructureString": "(or(A;B;or(C;D);E;F;G;H;I;J))"
        },
        {
          "leftStructureString": "(or(A;or(B;C);D;E;F;G;H;I;J))",
          "rightStructureString": "(or(A;B;C;D;E;F;G;H;I;J))"
        },
        {
          "leftStructureString": "(or(A;B;C;D;E;F;G;H;I;J))",
          "rightStructureString": "(or(A;or(B;C);D;E;F;G;H;I;J))"
        },
        {
          "leftStructureString": "(or(or(A;B);C;D;E;F;G;H;I;J))",
          "rightStructureString": "(or(A;B;C;D;E;F;G;H;I;J))"
        },
        {
          "leftStructureString": "(or(A;B;C;D;E;F;G;H;I;J))",
          "rightStructureString": "(or(or(A;B);C;D;E;F;G;H;I;J))"
        }
      ]
    },
    {
      "code": "SetResolution",
      "version": 0,
      "namespaceCode": "",
      "subjectType": "set",
      "rulePacks": [
        {
          "namespaceCode": "",
          "rulePackCode": "SetBase"
        }
      ],
      "rules": [
        {
          "leftStructureString": "(and(A;B;C))",
          "rightStructureString": "(and(B;A;C))"
        },
        {
          "leftStructureString": "(and(A;B;C))",
          "rightStructureString": "(and(C;A;B))"
        },
        {
          "leftStructureString": "(and(A;B;C))",
          "rightStructureString": "(and(A;C;B))"
        },
        {
          "leftStructureString": "(and(not(A);A;C))",
          "rightStructureString": "(0)"
        },
        {
          "leftStructureString": "(and(A;not(A);C))",
          "rightStructureString": "(0)"
        },
        {
          "leftStructureString": "(and(or(A;X);not(A);C))",
          "rightStructureString": "(and(X;or(A;X);not(A);C))"
        },
        {
          "leftStructureString": "(and(not(A);or(A;X);C))",
          "rightStructureString": "(and(X;not(A);or(A;X);C))"
        },
        {
          "leftStructureString": "(and(or(not(A);X);A;C))",
          "rightStructureString": "(and(X;or(not(A);X);A;C))"
        },
        {
          "leftStructureString": "(and(A;or(not(A);X);C))",
          "rightStructureString": "(and(X;A;or(not(A);X);C))"
        },
        {
          "leftStructureString": "(and(or(A;X);or(not(A);Y);C))",
          "rightStructureString": "(and(or(X;Y);or(A;X);or(not(A);Y);C))"
        },
        {
          "leftStructureString": "(and(or(not(A);X);or(A;Y);C))",
          "rightStructureString": "(and(or(X;Y);or(not(A);X);or(A;Y);C))"
        },
        {
          "leftStructureString": "(and(0;B;C))",
          "rightStructureString": "(0)"
        },
        {
          "leftStructureString": "(and(A;0;C))",
          "rightStructureString": "(0)"
        },
        {
          "leftStructureString": "(and(A;B;0))",
          "rightStructureString": "(0)"
        },
        {
          "leftStructureString": "(and(A;B;C;D))",
          "rightStructureString": "(and(B;A;C;D))"
        },
        {
          "leftStructureString": "(and(A;B;C;D))",
          "rightStructureString": "(and(C;A;B;D))"
        },
        {
          "leftStructureString": "(and(A;B;C;D))",
          "rightStructureString": "(and(D;A;B;C))"
        },
        {
          "leftStructureString": "(and(A;B;C;D))",
          "rightStructureString": "(and(A;C;B;D))"
        },
        {
          "leftStructureString": "(and(A;B;C;D))",
          "rightStructureString": "(and(A;D;B;C))"
        },
        {
          "leftStructureString": "(and(not(A);A;C;D))",
          "rightStructureString": "(0)"
        },
        {
          "leftStructureString": "(and(A;not(A);C;D))",
          "rightStructureString": "(0)"
        },
        {
          "leftStructureString": "(and(or(A;X);not(A);C;D))",
          "rightStructureString": "(and(X;or(A;X);not(A);C;D))"
        },
        {
          "leftStructureString": "(and(not(A);or(A;X);C;D))",
          "rightStructureString": "(and(X;not(A);or(A;X);C;D))"
        },
        {
          "leftStructureString": "(and(or(not(A);X);A;C;D))",
          "rightStructureString": "(and(X;or(not(A);X);A;C;D))"
        },
        {
          "leftStructureString": "(and(A;or(not(A);X);C;D))",
          "rightStructureString": "(and(X;A;or(not(A);X);C;D))"
        },
        {
          "leftStructureString": "(and(or(A;X);or(not(A);Y);C;D))",
          "rightStructureString": "(and(or(X;Y);or(A;X);or(not(A);Y);C;D))"
        },
        {
          "leftStructureString": "(and(or(not(A);X);or(A;Y);C;D))",
          "rightStructureString": "(and(or(X;Y);or(not(A);X);or(A;Y);C;D))"
        },
        {
          "leftStructureString": "(and(0;B;C;D))",
          "rightStructureString": "(0)"
        },
        {
          "leftStructureString": "(and(A;0;C;D))",
          "rightStructureString": "(0)"
        },
        {
          "leftStructureString": "(and(A;B;0;D))",
          "rightStructureString": "(0)"
        },
        {
          "leftStructureString": "(and(A;B;C;0))",
          "rightStructureString": "(0)"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E))",
          "rightStructureString": "(and(B;A;C;D;E))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E))",
          "rightStructureString": "(and(C;A;B;D;E))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E))",
          "rightStructureString": "(and(D;A;B;C;E))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E))",
          "rightStructureString": "(and(E;A;B;C;D))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E))",
          "rightStructureString": "(and(A;C;B;D;E))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E))",
          "rightStructureString": "(and(A;D;B;C;E))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E))",
          "rightStructureString": "(and(A;E;B;C;D))"
        },
        {
          "leftStructureString": "(and(not(A);A;C;D;E))",
          "rightStructureString": "(0)"
        },
        {
          "leftStructureString": "(and(A;not(A);C;D;E))",
          "rightStructureString": "(0)"
        },
        {
          "leftStructureString": "(and(or(A;X);not(A);C;D;E))",
          "rightStructureString": "(and(X;or(A;X);not(A);C;D;E))"
        },
        {
          "leftStructureString": "(and(not(A);or(A;X);C;D;E))",
          "rightStructureString": "(and(X;not(A);or(A;X);C;D;E))"
        },
        {
          "leftStructureString": "(and(or(not(A);X);A;C;D;E))",
          "rightStructureString": "(and(X;or(not(A);X);A;C;D;E))"
        },
        {
          "leftStructureString": "(and(A;or(not(A);X);C;D;E))",
          "rightStructureString": "(and(X;A;or(not(A);X);C;D;E))"
        },
        {
          "leftStructureString": "(and(or(A;X);or(not(A);Y);C;D;E))",
          "rightStructureString": "(and(or(X;Y);or(A;X);or(not(A);Y);C;D;E))"
        },
        {
          "leftStructureString": "(and(or(not(A);X);or(A;Y);C;D;E))",
          "rightStructureString": "(and(or(X;Y);or(not(A);X);or(A;Y);C;D;E))"
        },
        {
          "leftStructureString": "(and(0;B;C;D;E))",
          "rightStructureString": "(0)"
        },
        {
          "leftStructureString": "(and(A;0;C;D;E))",
          "rightStructureString": "(0)"
        },
        {
          "leftStructureString": "(and(A;B;0;D;E))",
          "rightStructureString": "(0)"
        },
        {
          "leftStructureString": "(and(A;B;C;0;E))",
          "rightStructureString": "(0)"
        },
        {
          "leftStructureString": "(and(A;B;C;D;0))",
          "rightStructureString": "(0)"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F))",
          "rightStructureString": "(and(B;A;C;D;E;F))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F))",
          "rightStructureString": "(and(C;A;B;D;E;F))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F))",
          "rightStructureString": "(and(D;A;B;C;E;F))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F))",
          "rightStructureString": "(and(E;A;B;C;D;F))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F))",
          "rightStructureString": "(and(F;A;B;C;D;E))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F))",
          "rightStructureString": "(and(A;C;B;D;E;F))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F))",
          "rightStructureString": "(and(A;D;B;C;E;F))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F))",
          "rightStructureString": "(and(A;E;B;C;D;F))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F))",
          "rightStructureString": "(and(A;F;B;C;D;E))"
        },
        {
          "leftStructureString": "(and(not(A);A;C;D;E;F))",
          "rightStructureString": "(0)"
        },
        {
          "leftStructureString": "(and(A;not(A);C;D;E;F))",
          "rightStructureString": "(0)"
        },
        {
          "leftStructureString": "(and(or(A;X);not(A);C;D;E;F))",
          "rightStructureString": "(and(X;or(A;X);not(A);C;D;E;F))"
        },
        {
          "leftStructureString": "(and(not(A);or(A;X);C;D;E;F))",
          "rightStructureString": "(and(X;not(A);or(A;X);C;D;E;F))"
        },
        {
          "leftStructureString": "(and(or(not(A);X);A;C;D;E;F))",
          "rightStructureString": "(and(X;or(not(A);X);A;C;D;E;F))"
        },
        {
          "leftStructureString": "(and(A;or(not(A);X);C;D;E;F))",
          "rightStructureString": "(and(X;A;or(not(A);X);C;D;E;F))"
        },
        {
          "leftStructureString": "(and(or(A;X);or(not(A);Y);C;D;E;F))",
          "rightStructureString": "(and(or(X;Y);or(A;X);or(not(A);Y);C;D;E;F))"
        },
        {
          "leftStructureString": "(and(or(not(A);X);or(A;Y);C;D;E;F))",
          "rightStructureString": "(and(or(X;Y);or(not(A);X);or(A;Y);C;D;E;F))"
        },
        {
          "leftStructureString": "(and(0;B;C;D;E;F))",
          "rightStructureString": "(0)"
        },
        {
          "leftStructureString": "(and(A;0;C;D;E;F))",
          "rightStructureString": "(0)"
        },
        {
          "leftStructureString": "(and(A;B;0;D;E;F))",
          "rightStructureString": "(0)"
        },
        {
          "leftStructureString": "(and(A;B;C;0;E;F))",
          "rightStructureString": "(0)"
        },
        {
          "leftStructureString": "(and(A;B;C;D;0;F))",
          "rightStructureString": "(0)"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;0))",
          "rightStructureString": "(0)"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G))",
          "rightStructureString": "(and(B;A;C;D;E;F;G))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G))",
          "rightStructureString": "(and(C;A;B;D;E;F;G))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G))",
          "rightStructureString": "(and(D;A;B;C;E;F;G))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G))",
          "rightStructureString": "(and(E;A;B;C;D;F;G))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G))",
          "rightStructureString": "(and(F;A;B;C;D;E;G))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G))",
          "rightStructureString": "(and(G;A;B;C;D;E;F))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G))",
          "rightStructureString": "(and(A;C;B;D;E;F;G))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G))",
          "rightStructureString": "(and(A;D;B;C;E;F;G))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G))",
          "rightStructureString": "(and(A;E;B;C;D;F;G))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G))",
          "rightStructureString": "(and(A;F;B;C;D;E;G))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G))",
          "rightStructureString": "(and(A;G;B;C;D;E;F))"
        },
        {
          "leftStructureString": "(and(not(A);A;C;D;E;F;G))",
          "rightStructureString": "(0)"
        },
        {
          "leftStructureString": "(and(A;not(A);C;D;E;F;G))",
          "rightStructureString": "(0)"
        },
        {
          "leftStructureString": "(and(or(A;X);not(A);C;D;E;F;G))",
          "rightStructureString": "(and(X;or(A;X);not(A);C;D;E;F;G))"
        },
        {
          "leftStructureString": "(and(not(A);or(A;X);C;D;E;F;G))",
          "rightStructureString": "(and(X;not(A);or(A;X);C;D;E;F;G))"
        },
        {
          "leftStructureString": "(and(or(not(A);X);A;C;D;E;F;G))",
          "rightStructureString": "(and(X;or(not(A);X);A;C;D;E;F;G))"
        },
        {
          "leftStructureString": "(and(A;or(not(A);X);C;D;E;F;G))",
          "rightStructureString": "(and(X;A;or(not(A);X);C;D;E;F;G))"
        },
        {
          "leftStructureString": "(and(or(A;X);or(not(A);Y);C;D;E;F;G))",
          "rightStructureString": "(and(or(X;Y);or(A;X);or(not(A);Y);C;D;E;F;G))"
        },
        {
          "leftStructureString": "(and(or(not(A);X);or(A;Y);C;D;E;F;G))",
          "rightStructureString": "(and(or(X;Y);or(not(A);X);or(A;Y);C;D;E;F;G))"
        },
        {
          "leftStructureString": "(and(0;B;C;D;E;F;G))",
          "rightStructureString": "(0)"
        },
        {
          "leftStructureString": "(and(A;0;C;D;E;F;G))",
          "rightStructureString": "(0)"
        },
        {
          "leftStructureString": "(and(A;B;0;D;E;F;G))",
          "rightStructureString": "(0)"
        },
        {
          "leftStructureString": "(and(A;B;C;0;E;F;G))",
          "rightStructureString": "(0)"
        },
        {
          "leftStructureString": "(and(A;B;C;D;0;F;G))",
          "rightStructureString": "(0)"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;0;G))",
          "rightStructureString": "(0)"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;0))",
          "rightStructureString": "(0)"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G;H))",
          "rightStructureString": "(and(B;A;C;D;E;F;G;H))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G;H))",
          "rightStructureString": "(and(C;A;B;D;E;F;G;H))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G;H))",
          "rightStructureString": "(and(D;A;B;C;E;F;G;H))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G;H))",
          "rightStructureString": "(and(E;A;B;C;D;F;G;H))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G;H))",
          "rightStructureString": "(and(F;A;B;C;D;E;G;H))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G;H))",
          "rightStructureString": "(and(G;A;B;C;D;E;F;H))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G;H))",
          "rightStructureString": "(and(H;A;B;C;D;E;F;G))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G;H))",
          "rightStructureString": "(and(A;C;B;D;E;F;G;H))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G;H))",
          "rightStructureString": "(and(A;D;B;C;E;F;G;H))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G;H))",
          "rightStructureString": "(and(A;E;B;C;D;F;G;H))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G;H))",
          "rightStructureString": "(and(A;F;B;C;D;E;G;H))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G;H))",
          "rightStructureString": "(and(A;G;B;C;D;E;F;H))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G;H))",
          "rightStructureString": "(and(A;H;B;C;D;E;F;G))"
        },
        {
          "leftStructureString": "(and(not(A);A;C;D;E;F;G;H))",
          "rightStructureString": "(0)"
        },
        {
          "leftStructureString": "(and(A;not(A);C;D;E;F;G;H))",
          "rightStructureString": "(0)"
        },
        {
          "leftStructureString": "(and(or(A;X);not(A);C;D;E;F;G;H))",
          "rightStructureString": "(and(X;or(A;X);not(A);C;D;E;F;G;H))"
        },
        {
          "leftStructureString": "(and(not(A);or(A;X);C;D;E;F;G;H))",
          "rightStructureString": "(and(X;not(A);or(A;X);C;D;E;F;G;H))"
        },
        {
          "leftStructureString": "(and(or(not(A);X);A;C;D;E;F;G;H))",
          "rightStructureString": "(and(X;or(not(A);X);A;C;D;E;F;G;H))"
        },
        {
          "leftStructureString": "(and(A;or(not(A);X);C;D;E;F;G;H))",
          "rightStructureString": "(and(X;A;or(not(A);X);C;D;E;F;G;H))"
        },
        {
          "leftStructureString": "(and(or(A;X);or(not(A);Y);C;D;E;F;G;H))",
          "rightStructureString": "(and(or(X;Y);or(A;X);or(not(A);Y);C;D;E;F;G;H))"
        },
        {
          "leftStructureString": "(and(or(not(A);X);or(A;Y);C;D;E;F;G;H))",
          "rightStructureString": "(and(or(X;Y);or(not(A);X);or(A;Y);C;D;E;F;G;H))"
        },
        {
          "leftStructureString": "(and(0;B;C;D;E;F;G;H))",
          "rightStructureString": "(0)"
        },
        {
          "leftStructureString": "(and(A;0;C;D;E;F;G;H))",
          "rightStructureString": "(0)"
        },
        {
          "leftStructureString": "(and(A;B;0;D;E;F;G;H))",
          "rightStructureString": "(0)"
        },
        {
          "leftStructureString": "(and(A;B;C;0;E;F;G;H))",
          "rightStructureString": "(0)"
        },
        {
          "leftStructureString": "(and(A;B;C;D;0;F;G;H))",
          "rightStructureString": "(0)"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;0;G;H))",
          "rightStructureString": "(0)"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;0;H))",
          "rightStructureString": "(0)"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G;0))",
          "rightStructureString": "(0)"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G;H;I))",
          "rightStructureString": "(and(B;A;C;D;E;F;G;H;I))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G;H;I))",
          "rightStructureString": "(and(C;A;B;D;E;F;G;H;I))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G;H;I))",
          "rightStructureString": "(and(D;A;B;C;E;F;G;H;I))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G;H;I))",
          "rightStructureString": "(and(E;A;B;C;D;F;G;H;I))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G;H;I))",
          "rightStructureString": "(and(F;A;B;C;D;E;G;H;I))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G;H;I))",
          "rightStructureString": "(and(G;A;B;C;D;E;F;H;I))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G;H;I))",
          "rightStructureString": "(and(H;A;B;C;D;E;F;G;I))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G;H;I))",
          "rightStructureString": "(and(I;A;B;C;D;E;F;G;H))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G;H;I))",
          "rightStructureString": "(and(A;C;B;D;E;F;G;H;I))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G;H;I))",
          "rightStructureString": "(and(A;D;B;C;E;F;G;H;I))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G;H;I))",
          "rightStructureString": "(and(A;E;B;C;D;F;G;H;I))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G;H;I))",
          "rightStructureString": "(and(A;F;B;C;D;E;G;H;I))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G;H;I))",
          "rightStructureString": "(and(A;G;B;C;D;E;F;H;I))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G;H;I))",
          "rightStructureString": "(and(A;H;B;C;D;E;F;G;I))"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G;H;I))",
          "rightStructureString": "(and(A;I;B;C;D;E;F;G;H))"
        },
        {
          "leftStructureString": "(and(not(A);A;C;D;E;F;G;H;I))",
          "rightStructureString": "(0)"
        },
        {
          "leftStructureString": "(and(A;not(A);C;D;E;F;G;H;I))",
          "rightStructureString": "(0)"
        },
        {
          "leftStructureString": "(and(or(A;X);not(A);C;D;E;F;G;H;I))",
          "rightStructureString": "(and(X;or(A;X);not(A);C;D;E;F;G;H;I))"
        },
        {
          "leftStructureString": "(and(not(A);or(A;X);C;D;E;F;G;H;I))",
          "rightStructureString": "(and(X;not(A);or(A;X);C;D;E;F;G;H;I))"
        },
        {
          "leftStructureString": "(and(or(not(A);X);A;C;D;E;F;G;H;I))",
          "rightStructureString": "(and(X;or(not(A);X);A;C;D;E;F;G;H;I))"
        },
        {
          "leftStructureString": "(and(A;or(not(A);X);C;D;E;F;G;H;I))",
          "rightStructureString": "(and(X;A;or(not(A);X);C;D;E;F;G;H;I))"
        },
        {
          "leftStructureString": "(and(or(A;X);or(not(A);Y);C;D;E;F;G;H;I))",
          "rightStructureString": "(and(or(X;Y);or(A;X);or(not(A);Y);C;D;E;F;G;H;I))"
        },
        {
          "leftStructureString": "(and(or(not(A);X);or(A;Y);C;D;E;F;G;H;I))",
          "rightStructureString": "(and(or(X;Y);or(not(A);X);or(A;Y);C;D;E;F;G;H;I))"
        },
        {
          "leftStructureString": "(and(0;B;C;D;E;F;G;H;I))",
          "rightStructureString": "(0)"
        },
        {
          "leftStructureString": "(and(A;0;C;D;E;F;G;H;I))",
          "rightStructureString": "(0)"
        },
        {
          "leftStructureString": "(and(A;B;0;D;E;F;G;H;I))",
          "rightStructureString": "(0)"
        },
        {
          "leftStructureString": "(and(A;B;C;0;E;F;G;H;I))",
          "rightStructureString": "(0)"
        },
        {
          "leftStructureString": "(and(A;B;C;D;0;F;G;H;I))",
          "rightStructureString": "(0)"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;0;G;H;I))",
          "rightStructureString": "(0)"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;0;H;I))",
          "rightStructureString": "(0)"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G;0;I))",
          "rightStructureString": "(0)"
        },
        {
          "leftStructureString": "(and(A;B;C;D;E;F;G;H;0))",
          "rightStructureString": "(0)"
        }
      ]
    }
  ]
}