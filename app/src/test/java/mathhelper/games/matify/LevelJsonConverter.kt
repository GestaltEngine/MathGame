package mathhelper.games.matify

import org.junit.Test
import com.google.gson.Gson;
import com.google.gson.GsonBuilder
import com.google.gson.JsonObject
import mathhelper.games.matify.game.FullTaskset
import mathhelper.games.matify.game.Game
import mathhelper.games.matify.level.Level
import mathhelper.games.matify.parser.GsonParser
import java.io.File
import java.io.FileReader
import java.io.FileWriter

class OldRule(
    val left: String?,
    val right: String?,
    val priority: Int?,
    val isExtending: Boolean?,
    val matchJumbledAndNested: Boolean?,
    val simpleAdditional: Boolean?,
    val basedOnTaskContext: Boolean?,
    val code: String?,

    val rulePack: String?
)

class OldLevel(
    val levelCode: String?,
    val name: String?,
    val en: String?,
    val ru: String?,
    val difficulty: Double?,
    val type: String?,
    val stepsNum: Int?,
    val time: Int?,
    val originalExpression: String?,
    val finalExpression: String?,
    val finalPattern: String?,
    val rules: List<OldRule>?,

    val simpleComputationRuleParamsMaxCalcComplexity: String?,
    val simpleComputationRuleParamsMaxPlusArgRounded: String?,
    val simpleComputationRuleParamsMaxResRounded: String?,
)

class OldRulePack(
    val name: String?,
    val type: String?,
    val rules: List<OldRule>?,
)

class OldGame(
    val gameSpace: String?,
    val gameCode: String?,
    val name: String?,
    val en: String?,
    val ru: String?,
    val version: Int?,
    val levels: List<OldLevel>?,
    val rulePacks: List<OldRulePack>?,
)

data class RuleITR(
    val code: String? = null,
    val nameEn: String? = null,
    val nameRu: String? = null,
    val descriptionShortEn: String? = null,
    val descriptionShortRu: String? = null,
    val descriptionEn: String? = null,
    val descriptionRu: String? = null,

    val leftStructureString: String? = null,
    val rightStructureString: String? = null,
    val priority: Int? = null,
    val isExtending: Boolean? = null,
    val matchJumbledAndNested: Boolean? = null,
    val simpleAdditional: Boolean? = null,
    val basedOnTaskContext: Boolean? = null,
    val normalizationType: Boolean? = null,
    val weight: Boolean? = null,
)

data class LevelITR(
    val taskCreationType: String? = null,

    val code: String? = null,
    val version: Int = 0,
    val namespaceCode: String? = null,
    val nameEn: String? = null,
    val nameRu: String? = null,
    val descriptionShortEn: String? = null,
    val descriptionShortRu: String? = null,
    val descriptionEn: String? = null,
    val descriptionRu: String? = null,

    val subjectType: String? = null,

    val originalExpressionStructureString: String? = null,

    val goalType: String? = null,
    val goalExpressionStructureString: String? = null,
    val goalPattern: String? = null,

    val rulePacks: List<RulePackLinkITR>? = null,
    val rules: List<RuleITR>? = null,

    val stepsNumber: Int?,
    val time: Int?,
    val difficulty: Double?,

    val solutionsStepsTree: Map<String, Any>? = null,
    val hints: Map<String, Any>? = null,
    val otherCheckSolutionData: Map<String, Any>? = null,
    val countOfAutoGeneratedTasks: Int? = null,
    val otherAutoGenerationData: Map<String, Any>? = null,
    val interestingFacts: Map<String, Any>? = null,
    val otherAwardData: Map<String, Any>? = null,
    val nextRecommendedTasks: Map<String, Any>? = null,
    val otherData: Map<String, Any>? = null,
)

data class TaskSetITR(
    val code: String? = null,
    val version: Int = 0,
    val namespaceCode: String? = null,
    val nameEn: String? = null,
    val nameRu: String? = null,
    val descriptionShortEn: String? = null,
    val descriptionShortRu: String? = null,
    val descriptionEn: String? = null,
    val descriptionRu: String? = null,

    val subjectType: String = "standard_math",
    val recommendedByCommunity: Boolean? = null,
    val otherData: Any? = null,
    val tasks: List<LevelITR>? = null,
)

data class RulePackLinkITR(
    val namespaceCode: String? = null,
    val rulePackCode: String? = null,
)

data class RulePackITR(
    val code: String? = null,
    val version: Int = 0,
    val namespaceCode: String? = null,
    val nameEn: String? = null,
    val nameRu: String? = null,
    val descriptionShortEn: String? = null,
    val descriptionShortRu: String? = null,
    val descriptionEn: String? = null,
    val descriptionRu: String? = null,

    val subjectType: String = "standard_math",
    val rulePacks: List<RulePackLinkITR>? = null,
    val rules: List<RuleITR>? = null,
)

data class GameITR(
    val taskSet: TaskSetITR,
    val rulePacks: List<RulePackITR>,
)

class LevelJsonConverter {
    val oldGamesPath = "/Users/vkatsman/StudioProjects/MathGame/app/src/main/assets/old/"
    val newGamesPath = "/Users/vkatsman/StudioProjects/MathGame/app/src/main/assets/active/"

    @Test
    fun runConvertJsonToITR() {
        val dir = File(oldGamesPath)
        for (file in dir.list()) {
            convertJsonToITR(file)
        }
    }

    fun convertJsonToITR(fileName: String) {
        val gsonReader = Gson()
        val oldGame = gsonReader.fromJson(FileReader(oldGamesPath + fileName), OldGame::class.java)

        val newGame = GameITR(
            taskSet = TaskSetITR(
                namespaceCode = oldGame.gameSpace ?: "",
                code = oldGame.gameCode ?: "",
                nameEn = oldGame.en ?: "",
                nameRu = oldGame.ru ?: "",
                tasks = oldGame.levels?.map {
                    LevelITR(
                        code = it.levelCode,
                        namespaceCode = oldGame.gameSpace ?: "",

                        originalExpressionStructureString = it.originalExpression,
                        goalType = null,
                        goalExpressionStructureString = if (it.finalPattern.isNullOrBlank()) {
                            it.finalExpression
                        } else {
                            ""
                        },
                        goalPattern = it.finalPattern,

                        difficulty = it.difficulty,
                        stepsNumber = it.stepsNum,
                        time = it.time,

                        rulePacks = it.rules?.filter { it.rulePack != null }?.map {
                            RulePackLinkITR(
                                rulePackCode = it.rulePack,
                                namespaceCode = oldGame.gameSpace ?: ""
                            )
                        },
                        rules = it.rules?.filter { it.rulePack == null }?.map {
                            RuleITR(
                                code = it.code,
                                leftStructureString = it.left,
                                rightStructureString = it.right,
                                priority = it.priority,
                                matchJumbledAndNested = it.matchJumbledAndNested,
                                isExtending = it.isExtending,
                                simpleAdditional = it.simpleAdditional,
                                basedOnTaskContext = it.basedOnTaskContext
                            )
                        },

                        nameRu = it.ru,
                        nameEn = it.en,
                        descriptionShortEn = it.finalExpression,
                        descriptionShortRu = it.finalExpression,

                        otherCheckSolutionData = mutableMapOf<String, Any>().apply {
                            if (it.simpleComputationRuleParamsMaxCalcComplexity != null) {
                                put("simpleComputationRuleParamsMaxCalcComplexity", it.simpleComputationRuleParamsMaxCalcComplexity)
                            }
                            if (it.simpleComputationRuleParamsMaxPlusArgRounded != null) {
                                put("simpleComputationRuleParamsMaxPlusArgRounded", it.simpleComputationRuleParamsMaxPlusArgRounded)
                            }
                            if (it.simpleComputationRuleParamsMaxResRounded != null) {
                                put("simpleComputationRuleParamsMaxResRounded", it.simpleComputationRuleParamsMaxResRounded)
                            }
                        }
                    )
                },
            ),
            rulePacks = oldGame.rulePacks?.map {
                RulePackITR(
                    code = it.name,
                    namespaceCode = oldGame.gameSpace ?: "",
                    subjectType = when (it.type) {
                        "set" -> "set"
                        "algebra" -> "standard_math"
                        else -> "standard_math"
                    },
                    rulePacks = it.rules?.filter { it.rulePack != null }?.map {
                        RulePackLinkITR(
                            rulePackCode = it.rulePack,
                            namespaceCode = oldGame.gameSpace ?: ""
                        )
                    },
                    rules = it.rules?.filter { it.rulePack == null }?.map {
                        RuleITR(
                            code = it.code,
                            leftStructureString = it.left,
                            rightStructureString = it.right,
                            priority = it.priority,
                            matchJumbledAndNested = it.matchJumbledAndNested,
                            isExtending = it.isExtending,
                            simpleAdditional = it.simpleAdditional,
                            basedOnTaskContext = it.basedOnTaskContext
                        )
                    },
                )
            } ?: emptyList()
        )

        val gsonWriter = GsonBuilder().setPrettyPrinting().create()
        val writer = FileWriter(newGamesPath + fileName)
        gsonWriter.toJson(newGame, writer)
        writer.flush()
        writer.close()
    }
}